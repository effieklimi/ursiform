"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/ask";
exports.ids = ["pages/api/ask"];
exports.modules = {

/***/ "@google/generative-ai":
/*!****************************************!*\
  !*** external "@google/generative-ai" ***!
  \****************************************/
/***/ ((module) => {

module.exports = import("@google/generative-ai");;

/***/ }),

/***/ "@qdrant/js-client-rest":
/*!*****************************************!*\
  !*** external "@qdrant/js-client-rest" ***!
  \*****************************************/
/***/ ((module) => {

module.exports = import("@qdrant/js-client-rest");;

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("openai");;

/***/ }),

/***/ "(api)/./lib/qdrant/db.ts":
/*!**************************!*\
  !*** ./lib/qdrant/db.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"client\": () => (/* binding */ client),\n/* harmony export */   \"createCollection\": () => (/* binding */ createCollection),\n/* harmony export */   \"testConnection\": () => (/* binding */ testConnection)\n/* harmony export */ });\n/* harmony import */ var _qdrant_js_client_rest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @qdrant/js-client-rest */ \"@qdrant/js-client-rest\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_qdrant_js_client_rest__WEBPACK_IMPORTED_MODULE_0__]);\n_qdrant_js_client_rest__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// Initialize client with support for both local and cloud instances\nconst qdrantUrl = \"https://1555b3af-2ea7-409c-83a3-3a49207ac217.us-east4-0.gcp.cloud.qdrant.io:6333\" || 0;\nconst qdrantApiKey = process.env.QDRANT_API_KEY;\nlet clientConfig;\n// For cloud instances, use the recommended format from documentation\nif (qdrantApiKey) {\n    // Parse the URL to extract host\n    const url = new URL(qdrantUrl);\n    const host = url.hostname;\n    const isHttps = url.protocol === \"https:\";\n    clientConfig = {\n        host: host,\n        port: null,\n        https: isHttps,\n        apiKey: qdrantApiKey\n    };\n    console.log(`Connecting to Qdrant Cloud at ${host} (HTTPS: ${isHttps})`);\n} else {\n    // For local instances without API key\n    clientConfig = {\n        url: qdrantUrl\n    };\n    console.log(`Connecting to local Qdrant at ${qdrantUrl}`);\n}\nconst client = new _qdrant_js_client_rest__WEBPACK_IMPORTED_MODULE_0__.QdrantClient(clientConfig);\n\n// Test Qdrant connection\nasync function testConnection() {\n    try {\n        // Use getCollections as a simple health check\n        await client.getCollections();\n        console.log(\"Qdrant connection successful\");\n        return true;\n    } catch (error) {\n        console.error(\"Qdrant connection failed:\", error);\n        return false;\n    }\n}\nasync function createCollection(name = \"my_collection\", dimension = 768) {\n    try {\n        // First test the connection\n        const isConnected = await testConnection();\n        if (!isConnected) {\n            throw new Error(\"Cannot connect to Qdrant database. Please check your configuration.\");\n        }\n        // Check if collection already exists\n        try {\n            await client.getCollection(name);\n            console.log(`Collection \"${name}\" already exists`);\n            return;\n        } catch (error) {\n            // Collection doesn't exist, create it\n            console.log(`Collection \"${name}\" does not exist, creating...`);\n            // Check if it's a different error than \"not found\"\n            if (error.status && error.status !== 404) {\n                console.error(\"Unexpected error checking collection:\", error);\n                throw error;\n            }\n        }\n        await client.createCollection(name, {\n            vectors: {\n                size: dimension,\n                distance: \"Cosine\"\n            }\n        });\n        console.log(`Collection \"${name}\" created successfully with dimension ${dimension}`);\n    } catch (error1) {\n        console.error(`Error creating collection \"${name}\":`, error1);\n        // Provide more specific error messages\n        if (error1.message?.includes(\"authentication\") || error1.status === 401 || error1.status === 403) {\n            throw new Error(\"Authentication failed. Please check your QDRANT_API_KEY and QDRANT_URL.\");\n        } else if (error1.message?.includes(\"connection\") || error1.code === \"ECONNREFUSED\") {\n            throw new Error(\"Cannot connect to Qdrant. Please check your QDRANT_URL.\");\n        } else {\n            throw error1;\n        }\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/qdrant/db.ts\n");

/***/ }),

/***/ "(api)/./lib/qdrant/nlp-query.ts":
/*!*********************************!*\
  !*** ./lib/qdrant/nlp-query.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"processNaturalQuery\": () => (/* binding */ processNaturalQuery)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @google/generative-ai */ \"@google/generative-ai\");\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./db */ \"(api)/./lib/qdrant/db.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([openai__WEBPACK_IMPORTED_MODULE_0__, _google_generative_ai__WEBPACK_IMPORTED_MODULE_1__, _db__WEBPACK_IMPORTED_MODULE_2__]);\n([openai__WEBPACK_IMPORTED_MODULE_0__, _google_generative_ai__WEBPACK_IMPORTED_MODULE_1__, _db__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_1__.GoogleGenerativeAI(process.env.GEMINI_API_KEY || \"\");\nasync function processNaturalQuery(collection, question, provider = \"openai\", model, context // Add conversation context\n) {\n    const startTime = Date.now();\n    try {\n        // Step 1: Resolve context and enrich the question\n        const { enrichedQuestion , resolvedCollection , updatedContext  } = await resolveContext(question, collection, context);\n        // Step 2: Parse intent with context awareness\n        const intent = await parseQueryIntent(enrichedQuestion, provider, model, updatedContext);\n        // Step 3: Use resolved collection or extracted collection\n        const finalCollection = resolvedCollection || intent.extractedCollection || null;\n        // Step 4: Execute the appropriate operation\n        const result = await executeQuery(finalCollection, intent);\n        // Step 5: Generate natural language response\n        const answer = await generateResponse(enrichedQuestion, intent, result, provider, model);\n        // Step 6: Update conversation context\n        const finalContext = updateConversationContext(updatedContext, question, intent, result, finalCollection);\n        const execution_time_ms = Date.now() - startTime;\n        return {\n            answer,\n            query_type: intent.type,\n            data: result,\n            execution_time_ms,\n            context: finalContext\n        };\n    } catch (error) {\n        console.error(\"Error processing natural query:\", error);\n        // Create fallback response\n        const fallbackAnswer = \"I encountered an issue processing your query, but I'm using pattern matching to help. \" + generateFallbackResponse(question, inferIntentFromQuestion(question, context), {\n            count: 0\n        });\n        return {\n            answer: fallbackAnswer,\n            query_type: \"fallback\",\n            data: null,\n            execution_time_ms: Date.now() - startTime,\n            context: context || {\n                conversationHistory: []\n            }\n        };\n    }\n}\nasync function resolveContext(question, collection, context) {\n    // Initialize context if not provided\n    const currentContext = context || {\n        conversationHistory: []\n    };\n    let enrichedQuestion = question;\n    let resolvedCollection = collection;\n    console.log(\"\\uD83E\\uDDE0 CONTEXT RESOLUTION:\");\n    console.log(\"Original question:\", question);\n    console.log(\"Current context:\", JSON.stringify(currentContext, null, 2));\n    // Detect contextual references\n    const lowercaseQuestion = question.toLowerCase();\n    // Handle pronoun references to entities\n    if ((lowercaseQuestion.includes(\"their\") || lowercaseQuestion.includes(\"his\") || lowercaseQuestion.includes(\"her\") || lowercaseQuestion.includes(\"its\")) && currentContext.lastEntity) {\n        console.log(\"\\uD83D\\uDD04 Resolving possessive pronoun to:\", currentContext.lastEntity);\n        enrichedQuestion = enrichedQuestion.replace(/\\b(their|his|her|its)\\b/gi, currentContext.lastEntity + \"'s\");\n    }\n    // Handle \"he\" and \"him\" references\n    if ((lowercaseQuestion.includes(\"he \") || lowercaseQuestion.includes(\"him \") || lowercaseQuestion.includes(\" he\") || lowercaseQuestion.includes(\" him\")) && currentContext.lastEntity) {\n        console.log(\"\\uD83D\\uDD04 Resolving 'he/him' to:\", currentContext.lastEntity);\n        enrichedQuestion = enrichedQuestion.replace(/\\b(he|him)\\b/gi, currentContext.lastEntity);\n    }\n    // Handle \"also\" references\n    if (lowercaseQuestion.includes(\"also\") && currentContext.lastEntity) {\n        if (!enrichedQuestion.includes(currentContext.lastEntity)) {\n            console.log(\"\\uD83D\\uDD04 Resolving 'also' reference to:\", currentContext.lastEntity);\n            enrichedQuestion = enrichedQuestion.replace(/also/i, `also for ${currentContext.lastEntity}`);\n        }\n    }\n    // Handle \"them\" references\n    if (lowercaseQuestion.includes(\"them\") && currentContext.lastEntity) {\n        console.log(\"\\uD83D\\uDD04 Resolving 'them' to:\", currentContext.lastEntity);\n        enrichedQuestion = enrichedQuestion.replace(/\\bthem\\b/gi, currentContext.lastEntity);\n    }\n    // Handle \"they\" references\n    if (lowercaseQuestion.includes(\"they\") && currentContext.lastEntity) {\n        console.log(\"\\uD83D\\uDD04 Resolving 'they' to:\", currentContext.lastEntity);\n        enrichedQuestion = enrichedQuestion.replace(/\\bthey\\b/gi, currentContext.lastEntity);\n    }\n    // Handle \"it\" references to collections\n    if (lowercaseQuestion.includes(\"it\") && currentContext.lastCollection) {\n        console.log(\"\\uD83D\\uDD04 Resolving 'it' to collection:\", currentContext.lastCollection);\n        enrichedQuestion = enrichedQuestion.replace(/\\bit\\b/gi, currentContext.lastCollection);\n    }\n    // Handle continuation phrases\n    if ((lowercaseQuestion.includes(\"what about\") || lowercaseQuestion.includes(\"how about\") || lowercaseQuestion.includes(\"and\")) && currentContext.lastQueryType && currentContext.lastTarget) {\n        // If question is like \"what about John Doe?\", expand to full context\n        const entityMatch = question.match(/(?:what about|how about|and)\\s+([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)/i);\n        if (entityMatch) {\n            const newEntity = entityMatch[1];\n            const lastQueryType = currentContext.lastQueryType;\n            console.log(\"\\uD83D\\uDD04 Resolving continuation to:\", `${lastQueryType} ${currentContext.lastTarget} by ${newEntity}`);\n            enrichedQuestion = `${lastQueryType} ${currentContext.lastTarget} by ${newEntity}`;\n        }\n    }\n    // Resolve collection context\n    if (!resolvedCollection && currentContext.lastCollection) {\n        // If no collection specified but we have context, check if query seems collection-specific\n        if (lowercaseQuestion.includes(\"this collection\") || lowercaseQuestion.includes(\"same collection\") || !lowercaseQuestion.includes(\"all collections\") && !lowercaseQuestion.includes(\"database\")) {\n            console.log(\"\\uD83D\\uDD04 Resolving collection context to:\", currentContext.lastCollection);\n            resolvedCollection = currentContext.lastCollection;\n        }\n    }\n    console.log(\"✅ Enriched question:\", enrichedQuestion);\n    console.log(\"✅ Resolved collection:\", resolvedCollection);\n    return {\n        enrichedQuestion,\n        resolvedCollection,\n        updatedContext: currentContext\n    };\n}\nfunction updateConversationContext(context, question, intent, result, collection) {\n    console.log(\"\\uD83D\\uDCBE UPDATING CONVERSATION CONTEXT:\");\n    console.log(\"Previous context:\", JSON.stringify(context, null, 2));\n    console.log(\"Intent:\", JSON.stringify(intent, null, 2));\n    console.log(\"Collection:\", collection);\n    // Create new conversation turn\n    const turn = {\n        id: Date.now().toString(),\n        question,\n        intent: {\n            type: intent.type,\n            target: intent.target,\n            filter: intent.filter,\n            scope: intent.scope,\n            extractedCollection: intent.extractedCollection\n        },\n        result,\n        timestamp: new Date()\n    };\n    // Update context\n    const updatedContext = {\n        ...context,\n        conversationHistory: [\n            ...context.conversationHistory,\n            turn\n        ].slice(-10)\n    };\n    // Update last entity if filter contains a name\n    if (intent.filter?.name) {\n        updatedContext.lastEntity = intent.filter.name;\n        console.log(\"\\uD83D\\uDCDD Updated lastEntity to:\", intent.filter.name);\n    }\n    // Update last collection\n    if (collection) {\n        updatedContext.lastCollection = collection;\n        console.log(\"\\uD83D\\uDCDD Updated lastCollection to:\", collection);\n    }\n    // Update last query type and target\n    updatedContext.lastQueryType = intent.type;\n    updatedContext.lastTarget = intent.target;\n    console.log(\"\\uD83D\\uDCDD Updated lastQueryType to:\", intent.type);\n    console.log(\"\\uD83D\\uDCDD Updated lastTarget to:\", intent.target);\n    // Update current topic based on query content\n    if (intent.filter?.name) {\n        updatedContext.currentTopic = `${intent.filter.name} ${intent.target}`;\n        console.log(\"\\uD83D\\uDCDD Updated currentTopic to:\", updatedContext.currentTopic);\n    }\n    console.log(\"✅ Final updated context:\", JSON.stringify(updatedContext, null, 2));\n    return updatedContext;\n}\nasync function parseQueryIntent(question, provider, model, context) {\n    // First try simple pattern matching as fallback\n    const fallbackIntent = inferIntentFromQuestion(question, context);\n    // Build context-aware system prompt\n    let systemPrompt = `You are a query intent parser for a vector database system. Parse the user's question to determine:\n1. Query type (count, search, list, filter, describe, summarize, analyze, collections, database)\n2. What to target (items, entities, collections, etc.)\n3. Any filters to apply (especially entity names)\n4. Query scope (collection-specific or database-wide)\n5. Collection name if mentioned\n\nAvailable scopes:\n- \"collection\": query operates on a specific collection\n- \"database\": query operates on the entire database\n\nIMPORTANT: Extract entity names from natural language variations:\n- \"by [Name]\", \"from [Name]\", \"of [Name]\"\n- \"done by [Name]\", \"created by [Name]\", \"made by [Name]\"\n- \"pieces by [Name]\", \"work by [Name]\", \"items by [Name]\"\n- \"[Name] items\", \"[Name] work\", \"[Name] pieces\"\n- Look for proper nouns (capitalized names) that could be entities\n\nWhen you find an entity name, put it in the filter with a generic field name \"name\".`;\n    // Add conversation context if available\n    if (context && context.conversationHistory.length > 0) {\n        systemPrompt += `\n\nCONVERSATION CONTEXT:\nRecent conversation history (use this to resolve references and continuations):\n`;\n        // Add last few turns for context\n        const recentTurns = context.conversationHistory.slice(-3);\n        recentTurns.forEach((turn, index)=>{\n            systemPrompt += `\n${index + 1}. User asked: \"${turn.question}\"\n   Intent: ${turn.intent.type} ${turn.intent.target}${turn.intent.filter ? ` (filter: ${JSON.stringify(turn.intent.filter)})` : \"\"}\n   Collection: ${turn.intent.extractedCollection || \"database-wide\"}`;\n        });\n        if (context.lastEntity) {\n            systemPrompt += `\nLast mentioned entity: ${context.lastEntity}`;\n        }\n        if (context.lastCollection) {\n            systemPrompt += `\nLast used collection: ${context.lastCollection}`;\n        }\n        if (context.currentTopic) {\n            systemPrompt += `\nCurrent conversation topic: ${context.currentTopic}`;\n        }\n        systemPrompt += `\n\nUse this context to resolve pronouns (they, them, their, it), continuations (also, what about), and implied references.\nFor example:\n- \"their work\" when last entity was \"John Doe\" should become filter: {\"name\": \"John Doe\"}\n- \"what about Alice?\" after asking about \"John Doe's paintings\" should become \"search paintings by Alice\"\n- \"also show me Bob\" after \"count items by Alice\" should become \"search items by Bob\"`;\n    }\n    systemPrompt += `\n\nReturn ONLY a JSON object in this format:\n{\n  \"type\": \"count|search|list|filter|describe|summarize|analyze|collections|database\",\n  \"target\": \"what to count/search/list (e.g., 'items', 'entities', 'collections')\",\n  \"filter\": {\"name\": \"extracted_entity_name\"} or null,\n  \"limit\": number or null,\n  \"scope\": \"collection|database\",\n  \"extractedCollection\": \"collection_name_if_mentioned_in_query\" or null\n}\n\nExamples:\n- \"How many items by John Doe?\" → {\"type\": \"count\", \"target\": \"items\", \"filter\": {\"name\": \"John Doe\"}, \"limit\": null, \"scope\": \"database\", \"extractedCollection\": null}\n- \"Summarize Alice Smith's work in mycollection\" → {\"type\": \"summarize\", \"target\": \"items\", \"filter\": {\"name\": \"Alice Smith\"}, \"limit\": 10, \"scope\": \"collection\", \"extractedCollection\": \"mycollection\"}\n- \"Can you summarise the pieces done by Bob Johnson?\" → {\"type\": \"summarize\", \"target\": \"items\", \"filter\": {\"name\": \"Bob Johnson\"}, \"limit\": 10, \"scope\": \"database\", \"extractedCollection\": null}\n- \"Find all Maria Garcia artwork\" → {\"type\": \"search\", \"target\": \"items\", \"filter\": {\"name\": \"Maria Garcia\"}, \"limit\": 20, \"scope\": \"database\", \"extractedCollection\": null}\n- \"Show me data created by AI Assistant\" → {\"type\": \"search\", \"target\": \"items\", \"filter\": {\"name\": \"AI Assistant\"}, \"limit\": 10, \"scope\": \"database\", \"extractedCollection\": null}`;\n    try {\n        let response;\n        if (provider === \"gemini\" && process.env.GEMINI_API_KEY) {\n            const geminiModel = genAI.getGenerativeModel({\n                model: model || \"gemini-2.0-flash\"\n            });\n            const result = await geminiModel.generateContent([\n                {\n                    text: systemPrompt\n                },\n                {\n                    text: `Question: \"${question}\"`\n                }, \n            ]);\n            response = result.response.text();\n        } else if (provider === \"openai\" && process.env.OPENAI_API_KEY) {\n            try {\n                const completion = await openai.chat.completions.create({\n                    model: model || \"gpt-3.5-turbo\",\n                    messages: [\n                        {\n                            role: \"system\",\n                            content: systemPrompt\n                        },\n                        {\n                            role: \"user\",\n                            content: `Question: \"${question}\"`\n                        }, \n                    ],\n                    temperature: 0\n                });\n                response = completion.choices[0].message.content || \"{}\";\n            } catch (openaiError) {\n                console.warn(\"OpenAI failed, trying Gemini fallback:\", openaiError.message);\n                // Auto-fallback to Gemini if OpenAI fails\n                if (process.env.GEMINI_API_KEY) {\n                    const geminiModel1 = genAI.getGenerativeModel({\n                        model: \"gemini-2.0-flash\"\n                    });\n                    const result1 = await geminiModel1.generateContent([\n                        {\n                            text: systemPrompt\n                        },\n                        {\n                            text: `Question: \"${question}\"`\n                        }, \n                    ]);\n                    response = result1.response.text();\n                } else {\n                    throw openaiError; // Re-throw if no Gemini fallback available\n                }\n            }\n        } else {\n            throw new Error(\"No valid API key for the specified provider\");\n        }\n        // Extract JSON from response (in case there's extra text)\n        const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n        const jsonStr = jsonMatch ? jsonMatch[0] : response;\n        return JSON.parse(jsonStr);\n    } catch (e) {\n        // Fallback parsing with context awareness\n        console.warn(\"Failed to parse LLM response, using context-aware fallback:\", e);\n        return fallbackIntent;\n    }\n}\nfunction inferIntentFromQuestion(question, context) {\n    const q = question.toLowerCase();\n    // Try to extract collection name from the question\n    const extractedCollection = extractCollectionFromQuestion(question);\n    // Handle pronouns in fallback if context is available\n    let processedQuestion = question;\n    if (context?.lastEntity) {\n        // Handle pronouns using context\n        if (q.includes(\" he \") || q.includes(\" him \") || q.includes(\"he \") || q.includes(\"him \")) {\n            console.log(\"\\uD83D\\uDD04 FALLBACK: Resolving 'he/him' to:\", context.lastEntity);\n            processedQuestion = processedQuestion.replace(/\\b(he|him)\\b/gi, context.lastEntity);\n        }\n        if (q.includes(\" they \") || q.includes(\" them \") || q.includes(\"they \") || q.includes(\"them \")) {\n            console.log(\"\\uD83D\\uDD04 FALLBACK: Resolving 'they/them' to:\", context.lastEntity);\n            processedQuestion = processedQuestion.replace(/\\b(they|them)\\b/gi, context.lastEntity);\n        }\n        if (q.includes(\" their \") || q.includes(\" his \") || q.includes(\" her \")) {\n            console.log(\"\\uD83D\\uDD04 FALLBACK: Resolving possessive to:\", context.lastEntity);\n            processedQuestion = processedQuestion.replace(/\\b(their|his|her)\\b/gi, context.lastEntity + \"'s\");\n        }\n    }\n    // Check for entity-specific queries with generic patterns (use processed question)\n    const entityMatch = processedQuestion.match(/(?:by|from|of)\\s+([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*?)(?=\\s+(?:in|from|of|at|with|for)\\b|$)/i) || processedQuestion.match(/(?:done\\s+by|created\\s+by|made\\s+by|work\\s+by|items\\s+by|pieces\\s+by)\\s+([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*?)(?=\\s+(?:in|from|of|at|with|for)\\b|$)/i) || processedQuestion.match(/([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)+)(?:\\s+(?:work|items|pieces|data|content))/i);\n    const entityName = entityMatch ? entityMatch[1].trim() : null;\n    // Database-level queries\n    if (q.includes(\"collections\") || q.includes(\"database\")) {\n        if (q.includes(\"how many\") || q.includes(\"count\")) {\n            return {\n                type: \"count\",\n                target: \"collections\",\n                scope: \"database\"\n            };\n        }\n        if (q.includes(\"list\") || q.includes(\"what\") || q.includes(\"show\")) {\n            return {\n                type: \"collections\",\n                target: \"list\",\n                scope: \"database\"\n            };\n        }\n        if (q.includes(\"describe\")) {\n            return {\n                type: \"database\",\n                target: \"overview\",\n                scope: \"database\"\n            };\n        }\n    }\n    // Entity-specific queries (high priority)\n    if (entityName) {\n        const filter = {\n            name: entityName\n        };\n        const scope = extractedCollection ? \"collection\" : \"database\";\n        if (q.includes(\"summary\") || q.includes(\"summarize\") || q.includes(\"summarise\") || q.includes(\"give me\") && q.includes(\"summary\")) {\n            return {\n                type: \"summarize\",\n                target: \"items\",\n                filter,\n                limit: 20,\n                scope,\n                ...extractedCollection && {\n                    extractedCollection\n                }\n            };\n        }\n        if (q.includes(\"how many\") || q.includes(\"count\")) {\n            return {\n                type: \"count\",\n                target: \"items\",\n                filter,\n                scope,\n                ...extractedCollection && {\n                    extractedCollection\n                }\n            };\n        }\n        if (q.includes(\"find\") || q.includes(\"search\") || q.includes(\"show\")) {\n            return {\n                type: \"search\",\n                target: \"items\",\n                filter,\n                limit: 10,\n                scope,\n                ...extractedCollection && {\n                    extractedCollection\n                }\n            };\n        }\n        if (q.includes(\"analyze\") || q.includes(\"analysis\")) {\n            return {\n                type: \"analyze\",\n                target: \"items\",\n                filter,\n                limit: 50,\n                scope,\n                ...extractedCollection && {\n                    extractedCollection\n                }\n            };\n        }\n    }\n    // Collection-level queries (existing logic)\n    if (q.includes(\"how many\") || q.includes(\"count\")) {\n        if (q.includes(\"entities\") || q.includes(\"names\") || q.includes(\"creators\")) {\n            return {\n                type: \"count\",\n                target: \"entities\",\n                scope: extractedCollection ? \"collection\" : \"database\",\n                ...extractedCollection && {\n                    extractedCollection\n                }\n            };\n        }\n        if (q.includes(\"vector\") || q.includes(\"item\") || q.includes(\"record\")) {\n            return {\n                type: \"count\",\n                target: \"total\",\n                scope: extractedCollection ? \"collection\" : \"database\",\n                ...extractedCollection && {\n                    extractedCollection\n                }\n            };\n        }\n        return {\n            type: \"count\",\n            target: \"total\",\n            scope: extractedCollection ? \"collection\" : \"database\",\n            ...extractedCollection && {\n                extractedCollection\n            }\n        };\n    }\n    if (q.includes(\"find\") || q.includes(\"search\")) {\n        // Check if it's across all collections\n        const scope1 = q.includes(\"all collections\") || q.includes(\"across\") ? \"database\" : extractedCollection ? \"collection\" : \"database\";\n        // Try to extract entity name (fallback pattern) - generic patterns\n        const fallbackEntityMatch = question.match(/(?:by|from|of)\\s+([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*?)(?=\\s+(?:in|from|of|at|with|for)\\b|$)/i) || question.match(/(?:done\\s+by|created\\s+by|made\\s+by)\\s+([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*?)(?=\\s+(?:in|from|of|at|with|for)\\b|$)/i);\n        if (fallbackEntityMatch) {\n            return {\n                type: \"search\",\n                target: \"items\",\n                filter: {\n                    name: fallbackEntityMatch[1]\n                },\n                limit: 10,\n                scope: scope1,\n                ...extractedCollection && {\n                    extractedCollection\n                }\n            };\n        }\n        return {\n            type: \"search\",\n            target: \"items\",\n            limit: 10,\n            scope: scope1,\n            ...extractedCollection && {\n                extractedCollection\n            }\n        };\n    }\n    if (q.includes(\"list\") || q.includes(\"show\")) {\n        if (q.includes(\"entities\") || q.includes(\"names\") || q.includes(\"creators\")) {\n            return {\n                type: \"list\",\n                target: \"entities\",\n                scope: extractedCollection ? \"collection\" : \"database\",\n                ...extractedCollection && {\n                    extractedCollection\n                }\n            };\n        }\n        return {\n            type: \"list\",\n            target: \"items\",\n            limit: 20,\n            scope: extractedCollection ? \"collection\" : \"database\",\n            ...extractedCollection && {\n                extractedCollection\n            }\n        };\n    }\n    if (q.includes(\"describe\")) {\n        return {\n            type: \"describe\",\n            target: extractedCollection ? \"collection\" : \"database\",\n            scope: extractedCollection ? \"collection\" : \"database\",\n            ...extractedCollection && {\n                extractedCollection\n            }\n        };\n    }\n    return {\n        type: \"describe\",\n        target: \"collection\",\n        scope: extractedCollection ? \"collection\" : \"database\",\n        ...extractedCollection && {\n            extractedCollection\n        }\n    };\n}\n// New function to extract collection names from natural language\nfunction extractCollectionFromQuestion(question) {\n    const q = question.toLowerCase();\n    // Common patterns for mentioning collections\n    const patterns = [\n        // \"in [collection]\" or \"from [collection]\"\n        /(?:in|from)\\s+([a-zA-Z][a-zA-Z0-9_-]*)/g,\n        // \"[collection] collection\"\n        /([a-zA-Z][a-zA-Z0-9_-]*)\\s+collection/g,\n        // \"collection [collection]\"\n        /collection\\s+([a-zA-Z][a-zA-Z0-9_-]*)/g, \n    ];\n    for (const pattern of patterns){\n        const matches = [\n            ...q.matchAll(pattern)\n        ];\n        for (const match of matches){\n            const candidate = match[1];\n            // Filter out common words that aren't collection names\n            if (![\n                \"the\",\n                \"this\",\n                \"that\",\n                \"my\",\n                \"your\",\n                \"our\",\n                \"their\",\n                \"all\",\n                \"some\",\n                \"any\",\n                \"each\",\n                \"every\", \n            ].includes(candidate)) {\n                return candidate;\n            }\n        }\n    }\n    // Look for specific common collection names that might appear without prepositions\n    const commonCollectionNames = [\n        \"midjourneysample\",\n        \"test_collection\",\n        \"my_docs\",\n        \"test_small\",\n        \"new_test_yearn\",\n        \"docs_openai\",\n        \"docs_gemini\", \n    ];\n    for (const name of commonCollectionNames){\n        if (q.includes(name)) {\n            return name;\n        }\n    }\n    return undefined;\n}\nasync function executeQuery(collection, intent) {\n    if (intent.scope === \"database\") {\n        return await executeDatabaseQuery(intent);\n    } else {\n        // Collection-level query - require collection name\n        if (!collection) {\n            throw new Error(\"Collection name is required for collection-level queries\");\n        }\n        return await executeCollectionQuery(collection, intent);\n    }\n}\nasync function executeDatabaseQuery(intent) {\n    switch(intent.type){\n        case \"count\":\n            if (intent.target === \"collections\") {\n                return await countCollections();\n            }\n            if (intent.target === \"artists\") {\n                return await countArtistsAcrossDatabase();\n            }\n            if ((intent.target === \"images\" || intent.target === \"items\") && intent.filter) {\n                return await countImagesByArtistAcrossDatabase(intent.filter);\n            }\n            if (intent.target === \"total\") {\n                return await countTotalVectorsAcrossDatabase();\n            }\n            // Fallback for count operations\n            return await countTotalVectorsAcrossDatabase();\n        case \"collections\":\n            return await listCollections();\n        case \"database\":\n            return await describeDatabaseInfo();\n        case \"search\":\n            if (intent.filter) {\n                return await searchAcrossCollections(intent.filter, intent.limit || 10);\n            }\n            break;\n        case \"summarize\":\n            if (intent.filter) {\n                return await summarizeArtistAcrossDatabase(intent.filter, intent.limit || 20);\n            }\n            break;\n        case \"list\":\n            if (intent.target === \"artists\") {\n                return await listArtistsAcrossDatabase(intent.limit || 50);\n            }\n            break;\n        default:\n            throw new Error(`Database-level query type '${intent.type}' not implemented yet`);\n    }\n    throw new Error(`Database-level query could not be executed: ${intent.type} ${intent.target}`);\n}\nasync function executeCollectionQuery(collection, intent) {\n    switch(intent.type){\n        case \"count\":\n            if (intent.target === \"artists\") {\n                return await countUniqueArtists(collection);\n            } else if ((intent.target === \"images\" || intent.target === \"items\") && intent.filter) {\n                return await countImagesByArtist(collection, intent.filter);\n            } else {\n                return await countTotal(collection);\n            }\n        case \"search\":\n            return await searchImages(collection, intent.filter, intent.limit || 10);\n        case \"summarize\":\n            return await summarizeArtistWork(collection, intent.filter, intent.limit || 20);\n        case \"analyze\":\n            return await analyzeArtistWork(collection, intent.filter, intent.limit || 50);\n        case \"list\":\n            if (intent.target === \"artists\") {\n                return await listUniqueArtists(collection, intent.limit || 50);\n            } else {\n                return await listImages(collection, intent.limit || 20);\n            }\n        case \"filter\":\n            return await filterImages(collection, intent.filter, intent.limit || 20);\n        case \"describe\":\n            return await describeCollection(collection);\n        default:\n            throw new Error(`Unknown collection-level query type: ${intent.type}`);\n    }\n}\n// New database-level functions\nasync function countCollections() {\n    const collectionsInfo = await _db__WEBPACK_IMPORTED_MODULE_2__.client.getCollections();\n    const collections = collectionsInfo.collections.map((c)=>c.name);\n    return {\n        count: collections.length,\n        collections: collections\n    };\n}\nasync function listCollections() {\n    const collectionsInfo = await _db__WEBPACK_IMPORTED_MODULE_2__.client.getCollections();\n    const collections = collectionsInfo.collections;\n    // Get detailed info for each collection using actual count\n    const detailedCollections = await Promise.all(collections.map(async (collection)=>{\n        try {\n            // Use the same count method that works for individual queries\n            const countResult = await _db__WEBPACK_IMPORTED_MODULE_2__.client.count(collection.name, {});\n            return {\n                name: collection.name,\n                vectors_count: countResult.count || 0\n            };\n        } catch (error) {\n            console.warn(`Failed to count vectors in collection ${collection.name}:`, error);\n            return {\n                name: collection.name,\n                vectors_count: 0\n            };\n        }\n    }));\n    return {\n        collections: detailedCollections\n    };\n}\nasync function describeDatabaseInfo() {\n    const collectionsData = await listCollections();\n    const totalVectors = collectionsData.collections.reduce((sum, col)=>sum + (col.vectors_count || 0), 0);\n    return {\n        total_collections: collectionsData.collections.length,\n        total_vectors: totalVectors,\n        collections: collectionsData.collections\n    };\n}\nasync function searchAcrossCollections(filter, limit) {\n    const collectionsData = await listCollections();\n    const allResults = [];\n    // Search each collection\n    for (const collection of collectionsData.collections){\n        try {\n            const results = await searchImages(collection.name, filter, limit);\n            if (results.images && results.images.length > 0) {\n                allResults.push({\n                    collection: collection.name,\n                    count: results.count,\n                    images: results.images\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to search collection ${collection.name}:`, error);\n        }\n    }\n    const totalCount = allResults.reduce((sum, result)=>sum + result.count, 0);\n    return {\n        total_count: totalCount,\n        collections_searched: collectionsData.collections.length,\n        results_by_collection: allResults\n    };\n}\n// Existing collection-level functions remain the same\nasync function countTotal(collection) {\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.count(collection, {});\n    return {\n        count: response.count\n    };\n}\nasync function countUniqueArtists(collection) {\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.scroll(collection, {\n        limit: 1000,\n        with_payload: true,\n        with_vector: false\n    });\n    const artists = new Set(response.points.map((point)=>point.payload?.name).filter(Boolean));\n    return {\n        count: artists.size,\n        artists: Array.from(artists).slice(0, 20)\n    };\n}\nasync function searchImages(collection, filter, limit) {\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.scroll(collection, {\n        limit: 1000,\n        with_payload: true,\n        with_vector: false\n    });\n    let filteredPoints = response.points;\n    if (filter) {\n        filteredPoints = response.points.filter((point)=>{\n            return Object.entries(filter).every(([key, value])=>{\n                return point.payload?.[key] === value;\n            });\n        });\n    }\n    const limitedPoints = filteredPoints.slice(0, limit);\n    return {\n        count: limitedPoints.length,\n        images: limitedPoints\n    };\n}\nasync function listUniqueArtists(collection, limit) {\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.scroll(collection, {\n        limit,\n        with_payload: true,\n        with_vector: false\n    });\n    const artists = new Set(response.points.map((point)=>point.payload?.name).filter(Boolean));\n    return {\n        artists: Array.from(artists)\n    };\n}\nasync function listImages(collection, limit) {\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.scroll(collection, {\n        limit,\n        with_payload: true,\n        with_vector: false\n    });\n    return {\n        count: response.points.length,\n        images: response.points.map((point)=>({\n                id: point.id,\n                artist: point.payload?.name,\n                filename: point.payload?.file_name\n            }))\n    };\n}\nasync function filterImages(collection, filter, limit) {\n    return await searchImages(collection, filter, limit);\n}\nasync function describeCollection(collection) {\n    const totalCount = await countTotal(collection);\n    const artistsData = await countUniqueArtists(collection);\n    const sampleImages = await listImages(collection, 5);\n    return {\n        total_images: totalCount.count,\n        unique_artists: artistsData.count,\n        sample_artists: artistsData.artists.slice(0, 10),\n        sample_images: sampleImages.images\n    };\n}\nasync function generateResponse(question, intent, data, provider, model) {\n    const fallbackResponse = generateFallbackResponse(question, intent, data);\n    if (!process.env.OPENAI_API_KEY && !process.env.GEMINI_API_KEY) {\n        return fallbackResponse;\n    }\n    const systemPrompt = `You are a helpful assistant that explains vector database query results in natural language.\n  \nThe user asked: \"${question}\"\nThe query type was: ${intent.type}\nThe query scope was: ${intent.scope}\nThe data returned is: ${JSON.stringify(data, null, 2)}\n\nProvide a concise, natural language response that directly answers the user's question. Be specific with numbers and names when available.`;\n    try {\n        let response;\n        if (provider === \"gemini\" && process.env.GEMINI_API_KEY) {\n            const geminiModel = genAI.getGenerativeModel({\n                model: model || \"gemini-2.0-flash\"\n            });\n            const result = await geminiModel.generateContent(systemPrompt);\n            response = result.response.text();\n        } else if (provider === \"openai\" && process.env.OPENAI_API_KEY) {\n            try {\n                const completion = await openai.chat.completions.create({\n                    model: model || \"gpt-3.5-turbo\",\n                    messages: [\n                        {\n                            role: \"system\",\n                            content: systemPrompt\n                        }\n                    ],\n                    temperature: 0.3,\n                    max_tokens: 200\n                });\n                response = completion.choices[0].message.content || fallbackResponse;\n            } catch (openaiError) {\n                console.warn(\"OpenAI failed in generateResponse, trying Gemini fallback:\", openaiError.message);\n                // Auto-fallback to Gemini if OpenAI fails\n                if (process.env.GEMINI_API_KEY) {\n                    const geminiModel1 = genAI.getGenerativeModel({\n                        model: \"gemini-2.0-flash\"\n                    });\n                    const result1 = await geminiModel1.generateContent(systemPrompt);\n                    response = result1.response.text();\n                } else {\n                    throw openaiError; // Re-throw if no Gemini fallback available\n                }\n            }\n        } else {\n            return fallbackResponse;\n        }\n        return response.trim();\n    } catch (error) {\n        console.warn(\"Failed to generate LLM response, using fallback:\", error);\n        return fallbackResponse;\n    }\n}\nfunction generateFallbackResponse(question, intent, data) {\n    // Safely handle null/undefined data\n    const safeData = data || {};\n    if (intent.scope === \"database\") {\n        switch(intent.type){\n            case \"count\":\n                if (intent.target === \"collections\") {\n                    return `I found ${safeData.count || 0} collections in the database: ${safeData.collections?.join(\", \") || \"None found\"}.`;\n                }\n                if (intent.target === \"artists\") {\n                    return `I found ${safeData.count || 0} unique artists across all collections. Some of them include: ${safeData.artists?.slice(0, 5).join(\", \") || \"No artists found\"}.`;\n                }\n                if (intent.target === \"images\" && intent.filter?.name) {\n                    return `I found ${safeData.count || 0} images by ${safeData.artist || intent.filter.name} across all collections. ${safeData.by_collection?.length > 0 ? `Found in: ${safeData.by_collection.map((c)=>`${c.collection} (${c.count})`).join(\", \")}.` : \"\"}`;\n                }\n                if (intent.target === \"total\") {\n                    return `The database contains ${safeData.count || 0} total vectors across all collections.`;\n                }\n                break;\n            case \"collections\":\n                return `The database contains ${safeData.collections?.length || 0} collections: ${safeData.collections?.map((c)=>`${c.name} (${c.vectors_count || 0} vectors)`).join(\", \") || \"None found\"}.`;\n            case \"database\":\n                return `The database contains ${safeData.total_collections || 0} collections with a total of ${safeData.total_vectors || 0} vectors.`;\n            case \"search\":\n                return `I searched across ${safeData.collections_searched || 0} collections and found ${safeData.total_count || 0} matching items.`;\n            case \"summarize\":\n                if (intent.filter?.name) {\n                    return `Summary of ${safeData.artist || intent.filter.name}'s work across the database:\\n\\n` + `Total Images: ${safeData.total_images || 0}\\n` + `Collections: Found in ${safeData.collections_found || 0} collections\\n` + `File Types: ${safeData.file_types?.join(\", \") || \"Various\"}\\n\\n` + `Breakdown by collection:\\n${safeData.by_collection?.map((c)=>`• ${c.collection}: ${c.image_count} images`).join(\"\\n\") || \"No collections found\"}\\n\\n` + `Sample Images: ${safeData.sample_images?.slice(0, 3).map((img)=>`${img.filename} (${img.collection})`).join(\", \") || \"None found\"}`;\n                }\n                break;\n            case \"list\":\n                if (intent.target === \"artists\") {\n                    return `I found ${safeData.artists?.length || 0} unique artists across all collections: ${safeData.artists?.slice(0, 10).join(\", \") || \"No artists found\"}.`;\n                }\n                break;\n        }\n    }\n    // Collection-level responses\n    switch(intent.type){\n        case \"count\":\n            if (intent.target === \"artists\") {\n                return `I found ${safeData.count || 0} unique artists in the collection. Some of them include: ${safeData.artists?.slice(0, 5).join(\", \") || \"No artists found\"}.`;\n            } else if (intent.target === \"images\" && intent.filter?.name) {\n                return `I found ${safeData.count || 0} images by ${safeData.artist || intent.filter.name} in this collection.${safeData.sample_images?.length > 0 ? ` Sample files: ${safeData.sample_images.slice(0, 3).map((img)=>img.filename).join(\", \")}.` : \"\"}`;\n            } else {\n                return `The collection contains ${safeData.count || 0} total images.`;\n            }\n        case \"search\":\n        case \"filter\":\n            return `I found ${safeData.count || 0} images matching your criteria.`;\n        case \"summarize\":\n            if (intent.filter?.name) {\n                return `Summary of ${safeData.artist || intent.filter.name}'s work in this collection:\\n\\n` + `Total Images: ${safeData.total_images || 0}\\n` + `File Types: ${safeData.file_types?.join(\", \") || \"Various\"}\\n` + `Sample Files: ${safeData.sample_filenames?.slice(0, 5).join(\", \") || \"None\"}\\n\\n` + `Image Details:\\n${safeData.images?.slice(0, 5).map((img, i)=>`${i + 1}. ${img.filename || \"Unknown file\"}`).join(\"\\n\") || \"No images found\"}`;\n            }\n            break;\n        case \"analyze\":\n            if (intent.filter?.name) {\n                return `Analysis of ${safeData.artist || intent.filter.name}'s work patterns:\\n\\n` + `Total Images: ${safeData.total_images || 0}\\n` + `File Types: ${Object.entries(safeData.file_type_distribution || {}).map(([type, count])=>`${type} (${count})`).join(\", \") || \"Various\"}\\n` + `Common Patterns: ${Object.entries(safeData.common_naming_patterns || {}).slice(0, 3).map(([pattern, count])=>`\"${pattern}\" (${count} files)`).join(\", \") || \"No patterns found\"}\\n` + `Source Domains: ${Object.keys(safeData.source_domains || {}).join(\", \") || \"Various\"}`;\n            }\n            break;\n        case \"list\":\n            if (intent.target === \"artists\") {\n                return `Here are the artists in the collection: ${safeData.artists?.slice(0, 10).join(\", \") || \"No artists found\"}${safeData.artists?.length > 10 ? \"...\" : \"\"}.`;\n            } else {\n                return `I found ${safeData.count || 0} items in the collection.`;\n            }\n        case \"describe\":\n            return `This collection contains ${safeData.total_images || 0} images from ${safeData.unique_artists || 0} unique artists. Some featured artists include: ${safeData.sample_artists?.slice(0, 5).join(\", \") || \"No artists found\"}.`;\n        default:\n            return \"I processed your query successfully using pattern matching.\";\n    }\n    return \"I processed your query successfully.\";\n}\n// New database-level functions for artists and total counts\nasync function countArtistsAcrossDatabase() {\n    const collectionsData = await listCollections();\n    const allArtists = new Set();\n    // Collect artists from each collection\n    for (const collection of collectionsData.collections){\n        try {\n            if (collection.vectors_count && collection.vectors_count > 0) {\n                const artistsData = await countUniqueArtists(collection.name);\n                artistsData.artists.forEach((artist)=>allArtists.add(artist));\n            }\n        } catch (error) {\n            console.warn(`Failed to get artists from collection ${collection.name}:`, error);\n        }\n    }\n    return {\n        count: allArtists.size,\n        artists: Array.from(allArtists).slice(0, 20)\n    };\n}\nasync function countTotalVectorsAcrossDatabase() {\n    const collectionsData = await listCollections();\n    const totalVectors = collectionsData.collections.reduce((sum, col)=>sum + (col.vectors_count || 0), 0);\n    return {\n        count: totalVectors,\n        by_collection: collectionsData.collections.map((col)=>({\n                name: col.name,\n                count: col.vectors_count || 0\n            }))\n    };\n}\nasync function listArtistsAcrossDatabase(limit) {\n    const collectionsData = await listCollections();\n    const allArtists = new Set();\n    const byCollection = [];\n    // Collect artists from each collection\n    for (const collection of collectionsData.collections){\n        try {\n            if (collection.vectors_count && collection.vectors_count > 0) {\n                const artistsData = await listUniqueArtists(collection.name, Math.min(limit, 20));\n                artistsData.artists.forEach((artist)=>allArtists.add(artist));\n                byCollection.push({\n                    collection: collection.name,\n                    artists: artistsData.artists\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to get artists from collection ${collection.name}:`, error);\n        }\n    }\n    return {\n        artists: Array.from(allArtists).slice(0, limit),\n        by_collection: byCollection\n    };\n}\n// New function to count images by specific artist\nasync function countImagesByArtist(collection, filter) {\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.scroll(collection, {\n        limit: 1000,\n        with_payload: true,\n        with_vector: false\n    });\n    let filteredPoints = response.points;\n    if (filter) {\n        filteredPoints = response.points.filter((point)=>{\n            return Object.entries(filter).every(([key, value])=>{\n                return point.payload?.[key] === value;\n            });\n        });\n    }\n    return {\n        count: filteredPoints.length,\n        artist: filter?.name || \"unknown\",\n        sample_images: filteredPoints.slice(0, 5).map((point)=>({\n                id: point.id,\n                filename: point.payload?.file_name,\n                url: point.payload?.image_url\n            }))\n    };\n}\n// New function to provide detailed summary of artist's work\nasync function summarizeArtistWork(collection, filter, limit) {\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.scroll(collection, {\n        limit: 1000,\n        with_payload: true,\n        with_vector: false\n    });\n    let filteredPoints = response.points;\n    if (filter) {\n        filteredPoints = response.points.filter((point)=>{\n            return Object.entries(filter).every(([key, value])=>{\n                return point.payload?.[key] === value;\n            });\n        });\n    }\n    const limitedPoints = filteredPoints.slice(0, limit);\n    // Analyze file types and patterns\n    const fileExtensions = new Set();\n    const fileNames = [];\n    const imageUrls = [];\n    limitedPoints.forEach((point)=>{\n        if (point.payload?.file_name) {\n            const ext = point.payload.file_name.split(\".\").pop()?.toLowerCase();\n            if (ext) fileExtensions.add(ext);\n            fileNames.push(point.payload.file_name);\n        }\n        if (point.payload?.image_url) {\n            imageUrls.push(point.payload.image_url);\n        }\n    });\n    return {\n        artist: filter?.name || \"unknown\",\n        total_images: filteredPoints.length,\n        displayed_images: limitedPoints.length,\n        file_types: Array.from(fileExtensions),\n        sample_filenames: fileNames.slice(0, 8),\n        sample_urls: imageUrls.slice(0, 5),\n        images: limitedPoints.map((point)=>({\n                id: point.id,\n                filename: point.payload?.file_name,\n                image_url: point.payload?.image_url,\n                style_url: point.payload?.url\n            }))\n    };\n}\n// New function to analyze artist's work patterns\nasync function analyzeArtistWork(collection, filter, limit) {\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.scroll(collection, {\n        limit: 1000,\n        with_payload: true,\n        with_vector: false\n    });\n    let filteredPoints = response.points;\n    if (filter) {\n        filteredPoints = response.points.filter((point)=>{\n            return Object.entries(filter).every(([key, value])=>{\n                return point.payload?.[key] === value;\n            });\n        });\n    }\n    // Analyze patterns in the artist's work\n    const fileTypes = new Map();\n    const namingPatterns = new Map();\n    const urlPatterns = new Map();\n    filteredPoints.forEach((point)=>{\n        // File type analysis\n        if (point.payload?.file_name) {\n            const ext = point.payload.file_name.split(\".\").pop()?.toLowerCase();\n            if (ext) {\n                fileTypes.set(ext, (fileTypes.get(ext) || 0) + 1);\n            }\n            // Naming pattern analysis\n            const namePattern = point.payload.file_name.replace(/\\d+/g, \"#\").replace(/\\.(jpg|jpeg|png|gif|webp)$/i, \"\");\n            namingPatterns.set(namePattern, (namingPatterns.get(namePattern) || 0) + 1);\n        }\n        // URL pattern analysis\n        if (point.payload?.url) {\n            const domain = point.payload.url.split(\"/\")[2];\n            if (domain) {\n                urlPatterns.set(domain, (urlPatterns.get(domain) || 0) + 1);\n            }\n        }\n    });\n    return {\n        artist: filter?.name || \"unknown\",\n        total_images: filteredPoints.length,\n        file_type_distribution: Object.fromEntries(fileTypes),\n        common_naming_patterns: Object.fromEntries(Array.from(namingPatterns.entries()).filter(([_, count])=>count > 1).sort((a, b)=>b[1] - a[1]).slice(0, 5)),\n        source_domains: Object.fromEntries(urlPatterns),\n        sample_images: filteredPoints.slice(0, 10).map((point)=>({\n                id: point.id,\n                filename: point.payload?.file_name,\n                image_url: point.payload?.image_url\n            }))\n    };\n}\n// New function to count specific artist images across all collections\nasync function countImagesByArtistAcrossDatabase(filter) {\n    const collectionsData = await listCollections();\n    const resultsByCollection = [];\n    let totalCount = 0;\n    for (const collection of collectionsData.collections){\n        try {\n            if (collection.vectors_count && collection.vectors_count > 0) {\n                const result = await countImagesByArtist(collection.name, filter);\n                if (result.count > 0) {\n                    resultsByCollection.push({\n                        collection: collection.name,\n                        count: result.count\n                    });\n                    totalCount += result.count;\n                }\n            }\n        } catch (error) {\n            console.warn(`Failed to count images in collection ${collection.name}:`, error);\n        }\n    }\n    return {\n        count: totalCount,\n        artist: filter?.name || \"unknown\",\n        by_collection: resultsByCollection\n    };\n}\n// New function to summarize artist work across all collections\nasync function summarizeArtistAcrossDatabase(filter, limit) {\n    const collectionsData = await listCollections();\n    const allImages = [];\n    const collectionSummaries = [];\n    const fileTypes = new Set();\n    for (const collection of collectionsData.collections){\n        try {\n            if (collection.vectors_count && collection.vectors_count > 0) {\n                const summary = await summarizeArtistWork(collection.name, filter, 50);\n                if (summary.total_images > 0) {\n                    collectionSummaries.push({\n                        collection: collection.name,\n                        ...summary\n                    });\n                    allImages.push(...summary.images);\n                    summary.file_types?.forEach((type)=>fileTypes.add(type));\n                }\n            }\n        } catch (error) {\n            console.warn(`Failed to summarize artist work in collection ${collection.name}:`, error);\n        }\n    }\n    const totalImages = allImages.length;\n    const displayedImages = allImages.slice(0, limit);\n    return {\n        artist: filter?.name || \"unknown\",\n        total_images: totalImages,\n        displayed_images: displayedImages.length,\n        collections_found: collectionSummaries.length,\n        file_types: Array.from(fileTypes),\n        by_collection: collectionSummaries.map((summary)=>({\n                collection: summary.collection,\n                image_count: summary.total_images,\n                sample_filenames: summary.sample_filenames?.slice(0, 3)\n            })),\n        sample_images: displayedImages.map((image)=>({\n                id: image.id,\n                filename: image.filename,\n                image_url: image.image_url,\n                collection: collectionSummaries.find((c)=>c.images?.some((img)=>img.id === image.id))?.collection\n            }))\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/qdrant/nlp-query.ts\n");

/***/ }),

/***/ "(api)/./lib/types.ts":
/*!**********************!*\
  !*** ./lib/types.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AVAILABLE_MODELS\": () => (/* binding */ AVAILABLE_MODELS)\n/* harmony export */ });\n// Available models\nconst AVAILABLE_MODELS = {\n    // OpenAI models (using correct model names)\n    \"gpt-4o\": {\n        provider: \"openai\",\n        name: \"GPT-4o\"\n    },\n    \"gpt-4o-mini\": {\n        provider: \"openai\",\n        name: \"GPT-4o Mini\"\n    },\n    \"gpt-4-turbo\": {\n        provider: \"openai\",\n        name: \"GPT-4 Turbo\"\n    },\n    \"gpt-3.5-turbo\": {\n        provider: \"openai\",\n        name: \"GPT-3.5 Turbo\"\n    },\n    // Gemini models (using correct model names)\n    \"gemini-2.0-flash\": {\n        provider: \"gemini\",\n        name: \"Gemini 2.0 Flash\"\n    },\n    \"gemini-1.5-pro\": {\n        provider: \"gemini\",\n        name: \"Gemini 1.5 Pro\"\n    },\n    \"gemini-1.5-flash\": {\n        provider: \"gemini\",\n        name: \"Gemini 1.5 Flash\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvdHlwZXMudHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQWlEQSxtQkFBbUI7QUFDWixNQUFNQSxnQkFBZ0IsR0FBRztJQUM5Qiw0Q0FBNEM7SUFDNUMsUUFBUSxFQUFFO1FBQUVDLFFBQVEsRUFBRSxRQUFRO1FBQUVDLElBQUksRUFBRSxRQUFRO0tBQUU7SUFDaEQsYUFBYSxFQUFFO1FBQUVELFFBQVEsRUFBRSxRQUFRO1FBQUVDLElBQUksRUFBRSxhQUFhO0tBQUU7SUFDMUQsYUFBYSxFQUFFO1FBQUVELFFBQVEsRUFBRSxRQUFRO1FBQUVDLElBQUksRUFBRSxhQUFhO0tBQUU7SUFDMUQsZUFBZSxFQUFFO1FBQUVELFFBQVEsRUFBRSxRQUFRO1FBQUVDLElBQUksRUFBRSxlQUFlO0tBQUU7SUFFOUQsNENBQTRDO0lBQzVDLGtCQUFrQixFQUFFO1FBQUVELFFBQVEsRUFBRSxRQUFRO1FBQUVDLElBQUksRUFBRSxrQkFBa0I7S0FBRTtJQUNwRSxnQkFBZ0IsRUFBRTtRQUFFRCxRQUFRLEVBQUUsUUFBUTtRQUFFQyxJQUFJLEVBQUUsZ0JBQWdCO0tBQUU7SUFDaEUsa0JBQWtCLEVBQUU7UUFBRUQsUUFBUSxFQUFFLFFBQVE7UUFBRUMsSUFBSSxFQUFFLGtCQUFrQjtLQUFFO0NBQ3JFLENBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly95ZWFybi8uL2xpYi90eXBlcy50cz8yYTU1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgTmF0dXJhbFF1ZXJ5UmVxdWVzdCB7XG4gIGNvbGxlY3Rpb24/OiBzdHJpbmc7XG4gIHF1ZXN0aW9uOiBzdHJpbmc7XG4gIG1vZGVsPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hdHVyYWxRdWVyeVJlc3BvbnNlIHtcbiAgcXVlc3Rpb246IHN0cmluZztcbiAgYW5zd2VyOiBzdHJpbmc7XG4gIHF1ZXJ5X3R5cGU6IHN0cmluZztcbiAgZGF0YT86IGFueTtcbiAgZXhlY3V0aW9uX3RpbWVfbXM6IG51bWJlcjtcbiAgY29udGV4dD86IENvbnZlcnNhdGlvbkNvbnRleHQ7IC8vIEFkZCBjb252ZXJzYXRpb24gY29udGV4dCB0byByZXNwb25zZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbnZlcnNhdGlvbkNvbnRleHQge1xuICBsYXN0RW50aXR5Pzogc3RyaW5nOyAvLyBMYXN0IG1lbnRpb25lZCBlbnRpdHkgKHBlcnNvbiwgY3JlYXRvciwgZXRjLilcbiAgbGFzdENvbGxlY3Rpb24/OiBzdHJpbmc7IC8vIExhc3QgbWVudGlvbmVkIG9yIHVzZWQgY29sbGVjdGlvblxuICBsYXN0UXVlcnlUeXBlPzogc3RyaW5nOyAvLyBMYXN0IHF1ZXJ5IHR5cGUgKHNlYXJjaCwgc3VtbWFyaXplLCBjb3VudCwgZXRjLilcbiAgbGFzdFRhcmdldD86IHN0cmluZzsgLy8gTGFzdCB0YXJnZXQgKGl0ZW1zLCBlbnRpdGllcywgZXRjLilcbiAgY29udmVyc2F0aW9uSGlzdG9yeTogQ29udmVyc2F0aW9uVHVybltdO1xuICBjdXJyZW50VG9waWM/OiBzdHJpbmc7IC8vIEN1cnJlbnQgdG9waWMgYmVpbmcgZGlzY3Vzc2VkXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29udmVyc2F0aW9uVHVybiB7XG4gIGlkOiBzdHJpbmc7XG4gIHF1ZXN0aW9uOiBzdHJpbmc7XG4gIGludGVudDoge1xuICAgIHR5cGU6IHN0cmluZztcbiAgICB0YXJnZXQ6IHN0cmluZztcbiAgICBmaWx0ZXI/OiBhbnk7XG4gICAgc2NvcGU6IHN0cmluZztcbiAgICBleHRyYWN0ZWRDb2xsZWN0aW9uPzogc3RyaW5nO1xuICB9O1xuICByZXN1bHQ6IGFueTtcbiAgdGltZXN0YW1wOiBEYXRlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENoYXRNZXNzYWdlIHtcbiAgaWQ6IHN0cmluZztcbiAgdHlwZTogXCJ1c2VyXCIgfCBcImFzc2lzdGFudFwiO1xuICBjb250ZW50OiBzdHJpbmc7XG4gIHRpbWVzdGFtcDogRGF0ZTtcbiAgcXVlcnlUeXBlPzogc3RyaW5nO1xuICBleGVjdXRpb25UaW1lPzogbnVtYmVyO1xuICBkYXRhPzogYW55O1xuICBjb250ZXh0PzogQ29udmVyc2F0aW9uQ29udGV4dDsgLy8gQWRkIGNvbnRleHQgdG8gbWVzc2FnZXNcbn1cblxuLy8gQXZhaWxhYmxlIG1vZGVsc1xuZXhwb3J0IGNvbnN0IEFWQUlMQUJMRV9NT0RFTFMgPSB7XG4gIC8vIE9wZW5BSSBtb2RlbHMgKHVzaW5nIGNvcnJlY3QgbW9kZWwgbmFtZXMpXG4gIFwiZ3B0LTRvXCI6IHsgcHJvdmlkZXI6IFwib3BlbmFpXCIsIG5hbWU6IFwiR1BULTRvXCIgfSxcbiAgXCJncHQtNG8tbWluaVwiOiB7IHByb3ZpZGVyOiBcIm9wZW5haVwiLCBuYW1lOiBcIkdQVC00byBNaW5pXCIgfSxcbiAgXCJncHQtNC10dXJib1wiOiB7IHByb3ZpZGVyOiBcIm9wZW5haVwiLCBuYW1lOiBcIkdQVC00IFR1cmJvXCIgfSxcbiAgXCJncHQtMy41LXR1cmJvXCI6IHsgcHJvdmlkZXI6IFwib3BlbmFpXCIsIG5hbWU6IFwiR1BULTMuNSBUdXJib1wiIH0sXG5cbiAgLy8gR2VtaW5pIG1vZGVscyAodXNpbmcgY29ycmVjdCBtb2RlbCBuYW1lcylcbiAgXCJnZW1pbmktMi4wLWZsYXNoXCI6IHsgcHJvdmlkZXI6IFwiZ2VtaW5pXCIsIG5hbWU6IFwiR2VtaW5pIDIuMCBGbGFzaFwiIH0sXG4gIFwiZ2VtaW5pLTEuNS1wcm9cIjogeyBwcm92aWRlcjogXCJnZW1pbmlcIiwgbmFtZTogXCJHZW1pbmkgMS41IFByb1wiIH0sXG4gIFwiZ2VtaW5pLTEuNS1mbGFzaFwiOiB7IHByb3ZpZGVyOiBcImdlbWluaVwiLCBuYW1lOiBcIkdlbWluaSAxLjUgRmxhc2hcIiB9LFxufSBhcyBjb25zdDtcblxuZXhwb3J0IHR5cGUgTW9kZWxLZXkgPSBrZXlvZiB0eXBlb2YgQVZBSUxBQkxFX01PREVMUztcbmV4cG9ydCB0eXBlIEVtYmVkZGluZ1Byb3ZpZGVyID0gXCJvcGVuYWlcIiB8IFwiZ2VtaW5pXCI7XG4iXSwibmFtZXMiOlsiQVZBSUxBQkxFX01PREVMUyIsInByb3ZpZGVyIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./lib/types.ts\n");

/***/ }),

/***/ "(api)/./pages/api/ask.ts":
/*!**************************!*\
  !*** ./pages/api/ask.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_qdrant_nlp_query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/qdrant/nlp-query */ \"(api)/./lib/qdrant/nlp-query.ts\");\n/* harmony import */ var _lib_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/types */ \"(api)/./lib/types.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_qdrant_nlp_query__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_qdrant_nlp_query__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nasync function handler(req, res) {\n    // Enable CORS\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    res.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS\");\n    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n    if (req.method === \"OPTIONS\") {\n        res.status(200).end();\n        return;\n    }\n    if (req.method !== \"POST\") {\n        res.setHeader(\"Allow\", [\n            \"POST\"\n        ]);\n        res.status(405).json({\n            error: `Method ${req.method} Not Allowed`\n        });\n        return;\n    }\n    try {\n        const { question , collection , provider =\"openai\" , model , context  } = req.body;\n        if (!question) {\n            res.status(400).json({\n                error: \"Missing required field: question\"\n            });\n            return;\n        }\n        // Determine provider from model, default to gemini-2.0-flash\n        const selectedModel = model || \"gemini-2.0-flash\";\n        const modelInfo = _lib_types__WEBPACK_IMPORTED_MODULE_1__.AVAILABLE_MODELS[selectedModel];\n        const providerInfo = modelInfo?.provider || \"gemini\";\n        console.log(`Processing natural language query: \"${question}\" for collection: ${collection || \"database-level\"} using model: ${selectedModel}`);\n        const result = await (0,_lib_qdrant_nlp_query__WEBPACK_IMPORTED_MODULE_0__.processNaturalQuery)(collection || null, question, providerInfo, selectedModel, context // Pass context to processing function\n        );\n        // Transform the result to match NaturalQueryResponse interface\n        const response = {\n            question,\n            answer: result.answer,\n            query_type: result.query_type,\n            data: result.data,\n            execution_time_ms: result.execution_time_ms,\n            context: result.context\n        };\n        res.status(200).json(response);\n    } catch (error) {\n        console.error(\"Error processing natural language query:\", error);\n        res.status(500).json({\n            error: error instanceof Error ? error.message : \"Internal server error\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvYXNrLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNpRTtBQU14QztBQUdWLGVBQWVFLE9BQU8sQ0FDbkNDLEdBQW1CLEVBQ25CQyxHQUE4RCxFQUM5RDtJQUNBLGNBQWM7SUFDZEEsR0FBRyxDQUFDQyxTQUFTLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbERELEdBQUcsQ0FBQ0MsU0FBUyxDQUFDLDhCQUE4QixFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFDcEVELEdBQUcsQ0FBQ0MsU0FBUyxDQUFDLDhCQUE4QixFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBRTlELElBQUlGLEdBQUcsQ0FBQ0csTUFBTSxLQUFLLFNBQVMsRUFBRTtRQUM1QkYsR0FBRyxDQUFDRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLE9BQU87SUFDVCxDQUFDO0lBRUQsSUFBSUwsR0FBRyxDQUFDRyxNQUFNLEtBQUssTUFBTSxFQUFFO1FBQ3pCRixHQUFHLENBQUNDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7WUFBQyxNQUFNO1NBQUMsQ0FBQyxDQUFDO1FBQ2pDRCxHQUFHLENBQUNHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0UsSUFBSSxDQUFDO1lBQUVDLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRVAsR0FBRyxDQUFDRyxNQUFNLENBQUMsWUFBWSxDQUFDO1NBQUUsQ0FBQyxDQUFDO1FBQ3BFLE9BQU87SUFDVCxDQUFDO0lBRUQsSUFBSTtRQUNGLE1BQU0sRUFDSkssUUFBUSxHQUNSQyxVQUFVLEdBQ1ZDLFFBQVEsRUFBRyxRQUFRLEdBQ25CQyxLQUFLLEdBQ0xDLE9BQU8sR0FDUixHQU1HWixHQUFHLENBQUNhLElBQUk7UUFFWixJQUFJLENBQUNMLFFBQVEsRUFBRTtZQUNiUCxHQUFHLENBQUNHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0UsSUFBSSxDQUFDO2dCQUNuQkMsS0FBSyxFQUFFLGtDQUFrQzthQUMxQyxDQUFDLENBQUM7WUFDSCxPQUFPO1FBQ1QsQ0FBQztRQUVELDZEQUE2RDtRQUM3RCxNQUFNTyxhQUFhLEdBQUdILEtBQUssSUFBSSxrQkFBa0I7UUFDakQsTUFBTUksU0FBUyxHQUNiakIsd0RBQWdCLENBQUNnQixhQUFhLENBQWtDO1FBQ2xFLE1BQU1FLFlBQVksR0FBR0QsU0FBUyxFQUFFTCxRQUFRLElBQUksUUFBUTtRQUVwRE8sT0FBTyxDQUFDQyxHQUFHLENBQ1QsQ0FBQyxvQ0FBb0MsRUFBRVYsUUFBUSxDQUFDLGtCQUFrQixFQUNoRUMsVUFBVSxJQUFJLGdCQUFnQixDQUMvQixjQUFjLEVBQUVLLGFBQWEsQ0FBQyxDQUFDLENBQ2pDLENBQUM7UUFFRixNQUFNSyxNQUFNLEdBQUcsTUFBTXRCLDBFQUFtQixDQUN0Q1ksVUFBVSxJQUFJLElBQUksRUFDbEJELFFBQVEsRUFDUlEsWUFBWSxFQUNaRixhQUFhLEVBQ2JGLE9BQU8sQ0FBQyxzQ0FBc0M7U0FDL0M7UUFFRCwrREFBK0Q7UUFDL0QsTUFBTVEsUUFBUSxHQUF5QjtZQUNyQ1osUUFBUTtZQUNSYSxNQUFNLEVBQUVGLE1BQU0sQ0FBQ0UsTUFBTTtZQUNyQkMsVUFBVSxFQUFFSCxNQUFNLENBQUNHLFVBQVU7WUFDN0JDLElBQUksRUFBRUosTUFBTSxDQUFDSSxJQUFJO1lBQ2pCQyxpQkFBaUIsRUFBRUwsTUFBTSxDQUFDSyxpQkFBaUI7WUFDM0NaLE9BQU8sRUFBRU8sTUFBTSxDQUFDUCxPQUFPO1NBQ3hCO1FBRURYLEdBQUcsQ0FBQ0csTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDRSxJQUFJLENBQUNjLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLEVBQUUsT0FBT2IsS0FBSyxFQUFFO1FBQ2RVLE9BQU8sQ0FBQ1YsS0FBSyxDQUFDLDBDQUEwQyxFQUFFQSxLQUFLLENBQUMsQ0FBQztRQUNqRU4sR0FBRyxDQUFDRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNFLElBQUksQ0FBQztZQUNuQkMsS0FBSyxFQUFFQSxLQUFLLFlBQVlrQixLQUFLLEdBQUdsQixLQUFLLENBQUNtQixPQUFPLEdBQUcsdUJBQXVCO1NBQ3hFLENBQUMsQ0FBQztJQUNMLENBQUM7QUFDSCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veWVhcm4vLi9wYWdlcy9hcGkvYXNrLnRzPzY2NDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSBcIm5leHRcIjtcbmltcG9ydCB7IHByb2Nlc3NOYXR1cmFsUXVlcnkgfSBmcm9tIFwiLi4vLi4vbGliL3FkcmFudC9ubHAtcXVlcnlcIjtcbmltcG9ydCB7XG4gIE5hdHVyYWxRdWVyeVJlcXVlc3QsXG4gIE5hdHVyYWxRdWVyeVJlc3BvbnNlLFxuICBBVkFJTEFCTEVfTU9ERUxTLFxuICBDb252ZXJzYXRpb25Db250ZXh0LFxufSBmcm9tIFwiLi4vLi4vbGliL3R5cGVzXCI7XG5pbXBvcnQgeyBFbWJlZGRpbmdQcm92aWRlciB9IGZyb20gXCIuLi8uLi9saWIvc2NoZW1hc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKFxuICByZXE6IE5leHRBcGlSZXF1ZXN0LFxuICByZXM6IE5leHRBcGlSZXNwb25zZTxOYXR1cmFsUXVlcnlSZXNwb25zZSB8IHsgZXJyb3I6IHN0cmluZyB9PlxuKSB7XG4gIC8vIEVuYWJsZSBDT1JTXG4gIHJlcy5zZXRIZWFkZXIoXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIiwgXCIqXCIpO1xuICByZXMuc2V0SGVhZGVyKFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kc1wiLCBcIkdFVCwgUE9TVCwgT1BUSU9OU1wiKTtcbiAgcmVzLnNldEhlYWRlcihcIkFjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnNcIiwgXCJDb250ZW50LVR5cGVcIik7XG5cbiAgaWYgKHJlcS5tZXRob2QgPT09IFwiT1BUSU9OU1wiKSB7XG4gICAgcmVzLnN0YXR1cygyMDApLmVuZCgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChyZXEubWV0aG9kICE9PSBcIlBPU1RcIikge1xuICAgIHJlcy5zZXRIZWFkZXIoXCJBbGxvd1wiLCBbXCJQT1NUXCJdKTtcbiAgICByZXMuc3RhdHVzKDQwNSkuanNvbih7IGVycm9yOiBgTWV0aG9kICR7cmVxLm1ldGhvZH0gTm90IEFsbG93ZWRgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3Qge1xuICAgICAgcXVlc3Rpb24sXG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgcHJvdmlkZXIgPSBcIm9wZW5haVwiLFxuICAgICAgbW9kZWwsXG4gICAgICBjb250ZXh0LCAvLyBBZGQgY29udmVyc2F0aW9uIGNvbnRleHQgcGFyYW1ldGVyXG4gICAgfToge1xuICAgICAgcXVlc3Rpb246IHN0cmluZztcbiAgICAgIGNvbGxlY3Rpb24/OiBzdHJpbmc7XG4gICAgICBwcm92aWRlcj86IEVtYmVkZGluZ1Byb3ZpZGVyO1xuICAgICAgbW9kZWw/OiBzdHJpbmc7XG4gICAgICBjb250ZXh0PzogQ29udmVyc2F0aW9uQ29udGV4dDsgLy8gQWRkIGNvbnRleHQgdHlwZVxuICAgIH0gPSByZXEuYm9keSBhcyBOYXR1cmFsUXVlcnlSZXF1ZXN0O1xuXG4gICAgaWYgKCFxdWVzdGlvbikge1xuICAgICAgcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogXCJNaXNzaW5nIHJlcXVpcmVkIGZpZWxkOiBxdWVzdGlvblwiLFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRGV0ZXJtaW5lIHByb3ZpZGVyIGZyb20gbW9kZWwsIGRlZmF1bHQgdG8gZ2VtaW5pLTIuMC1mbGFzaFxuICAgIGNvbnN0IHNlbGVjdGVkTW9kZWwgPSBtb2RlbCB8fCBcImdlbWluaS0yLjAtZmxhc2hcIjtcbiAgICBjb25zdCBtb2RlbEluZm8gPVxuICAgICAgQVZBSUxBQkxFX01PREVMU1tzZWxlY3RlZE1vZGVsIGFzIGtleW9mIHR5cGVvZiBBVkFJTEFCTEVfTU9ERUxTXTtcbiAgICBjb25zdCBwcm92aWRlckluZm8gPSBtb2RlbEluZm8/LnByb3ZpZGVyIHx8IFwiZ2VtaW5pXCI7XG5cbiAgICBjb25zb2xlLmxvZyhcbiAgICAgIGBQcm9jZXNzaW5nIG5hdHVyYWwgbGFuZ3VhZ2UgcXVlcnk6IFwiJHtxdWVzdGlvbn1cIiBmb3IgY29sbGVjdGlvbjogJHtcbiAgICAgICAgY29sbGVjdGlvbiB8fCBcImRhdGFiYXNlLWxldmVsXCJcbiAgICAgIH0gdXNpbmcgbW9kZWw6ICR7c2VsZWN0ZWRNb2RlbH1gXG4gICAgKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByb2Nlc3NOYXR1cmFsUXVlcnkoXG4gICAgICBjb2xsZWN0aW9uIHx8IG51bGwsXG4gICAgICBxdWVzdGlvbixcbiAgICAgIHByb3ZpZGVySW5mbyxcbiAgICAgIHNlbGVjdGVkTW9kZWwsXG4gICAgICBjb250ZXh0IC8vIFBhc3MgY29udGV4dCB0byBwcm9jZXNzaW5nIGZ1bmN0aW9uXG4gICAgKTtcblxuICAgIC8vIFRyYW5zZm9ybSB0aGUgcmVzdWx0IHRvIG1hdGNoIE5hdHVyYWxRdWVyeVJlc3BvbnNlIGludGVyZmFjZVxuICAgIGNvbnN0IHJlc3BvbnNlOiBOYXR1cmFsUXVlcnlSZXNwb25zZSA9IHtcbiAgICAgIHF1ZXN0aW9uLFxuICAgICAgYW5zd2VyOiByZXN1bHQuYW5zd2VyLFxuICAgICAgcXVlcnlfdHlwZTogcmVzdWx0LnF1ZXJ5X3R5cGUsXG4gICAgICBkYXRhOiByZXN1bHQuZGF0YSxcbiAgICAgIGV4ZWN1dGlvbl90aW1lX21zOiByZXN1bHQuZXhlY3V0aW9uX3RpbWVfbXMsXG4gICAgICBjb250ZXh0OiByZXN1bHQuY29udGV4dCwgLy8gUmV0dXJuIHVwZGF0ZWQgY29udmVyc2F0aW9uIGNvbnRleHRcbiAgICB9O1xuXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24ocmVzcG9uc2UpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBwcm9jZXNzaW5nIG5hdHVyYWwgbGFuZ3VhZ2UgcXVlcnk6XCIsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBcIkludGVybmFsIHNlcnZlciBlcnJvclwiLFxuICAgIH0pO1xuICB9XG59XG4iXSwibmFtZXMiOlsicHJvY2Vzc05hdHVyYWxRdWVyeSIsIkFWQUlMQUJMRV9NT0RFTFMiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwic2V0SGVhZGVyIiwibWV0aG9kIiwic3RhdHVzIiwiZW5kIiwianNvbiIsImVycm9yIiwicXVlc3Rpb24iLCJjb2xsZWN0aW9uIiwicHJvdmlkZXIiLCJtb2RlbCIsImNvbnRleHQiLCJib2R5Iiwic2VsZWN0ZWRNb2RlbCIsIm1vZGVsSW5mbyIsInByb3ZpZGVySW5mbyIsImNvbnNvbGUiLCJsb2ciLCJyZXN1bHQiLCJyZXNwb25zZSIsImFuc3dlciIsInF1ZXJ5X3R5cGUiLCJkYXRhIiwiZXhlY3V0aW9uX3RpbWVfbXMiLCJFcnJvciIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./pages/api/ask.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/ask.ts"));
module.exports = __webpack_exports__;

})();