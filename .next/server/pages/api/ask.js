"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/ask";
exports.ids = ["pages/api/ask"];
exports.modules = {

/***/ "@google/generative-ai":
/*!****************************************!*\
  !*** external "@google/generative-ai" ***!
  \****************************************/
/***/ ((module) => {

module.exports = import("@google/generative-ai");;

/***/ }),

/***/ "@qdrant/js-client-rest":
/*!*****************************************!*\
  !*** external "@qdrant/js-client-rest" ***!
  \*****************************************/
/***/ ((module) => {

module.exports = import("@qdrant/js-client-rest");;

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("openai");;

/***/ }),

/***/ "(api)/./lib/qdrant/db.ts":
/*!**************************!*\
  !*** ./lib/qdrant/db.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"client\": () => (/* binding */ client),\n/* harmony export */   \"createCollection\": () => (/* binding */ createCollection),\n/* harmony export */   \"testConnection\": () => (/* binding */ testConnection)\n/* harmony export */ });\n/* harmony import */ var _qdrant_js_client_rest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @qdrant/js-client-rest */ \"@qdrant/js-client-rest\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_qdrant_js_client_rest__WEBPACK_IMPORTED_MODULE_0__]);\n_qdrant_js_client_rest__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// Initialize client with support for both local and cloud instances\nconst qdrantUrl = \"https://1555b3af-2ea7-409c-83a3-3a49207ac217.us-east4-0.gcp.cloud.qdrant.io:6333\" || 0;\nconst qdrantApiKey = process.env.QDRANT_API_KEY;\nlet clientConfig;\n// For cloud instances, use the recommended format from documentation\nif (qdrantApiKey) {\n    // Parse the URL to extract host\n    const url = new URL(qdrantUrl);\n    const host = url.hostname;\n    const isHttps = url.protocol === \"https:\";\n    clientConfig = {\n        host: host,\n        port: null,\n        https: isHttps,\n        apiKey: qdrantApiKey\n    };\n    console.log(`Connecting to Qdrant Cloud at ${host} (HTTPS: ${isHttps})`);\n} else {\n    // For local instances without API key\n    clientConfig = {\n        url: qdrantUrl\n    };\n    console.log(`Connecting to local Qdrant at ${qdrantUrl}`);\n}\nconst client = new _qdrant_js_client_rest__WEBPACK_IMPORTED_MODULE_0__.QdrantClient(clientConfig);\n\n// Test Qdrant connection\nasync function testConnection() {\n    try {\n        // Use getCollections as a simple health check\n        await client.getCollections();\n        console.log(\"Qdrant connection successful\");\n        return true;\n    } catch (error) {\n        console.error(\"Qdrant connection failed:\", error);\n        return false;\n    }\n}\nasync function createCollection(name = \"my_collection\", dimension = 768) {\n    try {\n        // First test the connection\n        const isConnected = await testConnection();\n        if (!isConnected) {\n            throw new Error(\"Cannot connect to Qdrant database. Please check your configuration.\");\n        }\n        // Check if collection already exists\n        try {\n            await client.getCollection(name);\n            console.log(`Collection \"${name}\" already exists`);\n            return;\n        } catch (error) {\n            // Collection doesn't exist, create it\n            console.log(`Collection \"${name}\" does not exist, creating...`);\n            // Check if it's a different error than \"not found\"\n            if (error.status && error.status !== 404) {\n                console.error(\"Unexpected error checking collection:\", error);\n                throw error;\n            }\n        }\n        await client.createCollection(name, {\n            vectors: {\n                size: dimension,\n                distance: \"Cosine\"\n            }\n        });\n        console.log(`Collection \"${name}\" created successfully with dimension ${dimension}`);\n    } catch (error1) {\n        console.error(`Error creating collection \"${name}\":`, error1);\n        // Provide more specific error messages\n        if (error1.message?.includes(\"authentication\") || error1.status === 401 || error1.status === 403) {\n            throw new Error(\"Authentication failed. Please check your QDRANT_API_KEY and QDRANT_URL.\");\n        } else if (error1.message?.includes(\"connection\") || error1.code === \"ECONNREFUSED\") {\n            throw new Error(\"Cannot connect to Qdrant. Please check your QDRANT_URL.\");\n        } else {\n            throw error1;\n        }\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/qdrant/db.ts\n");

/***/ }),

/***/ "(api)/./lib/qdrant/nlp-query.ts":
/*!*********************************!*\
  !*** ./lib/qdrant/nlp-query.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"processNaturalQuery\": () => (/* binding */ processNaturalQuery)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @google/generative-ai */ \"@google/generative-ai\");\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./db */ \"(api)/./lib/qdrant/db.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([openai__WEBPACK_IMPORTED_MODULE_0__, _google_generative_ai__WEBPACK_IMPORTED_MODULE_1__, _db__WEBPACK_IMPORTED_MODULE_2__]);\n([openai__WEBPACK_IMPORTED_MODULE_0__, _google_generative_ai__WEBPACK_IMPORTED_MODULE_1__, _db__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_1__.GoogleGenerativeAI(process.env.GEMINI_API_KEY || \"\");\nasync function processNaturalQuery(collection, question, provider = \"openai\") {\n    const startTime = Date.now();\n    try {\n        // Step 1: Understand the intent using LLM\n        const intent = await parseQueryIntent(question, provider);\n        // Step 2: Execute the appropriate Qdrant operation\n        const result = await executeQuery(collection, intent);\n        // Step 3: Generate natural language response\n        const answer = await generateResponse(question, intent, result, provider);\n        const execution_time_ms = Date.now() - startTime;\n        return {\n            answer,\n            query_type: intent.type,\n            data: result,\n            execution_time_ms\n        };\n    } catch (error) {\n        console.error(\"Error processing natural query:\", error);\n        // Create fallback response even if everything fails\n        const fallbackAnswer = \"I encountered an issue processing your query, but I'm using pattern matching to help. \" + generateFallbackResponse(question, inferIntentFromQuestion(question), {\n            count: 0\n        });\n        return {\n            answer: fallbackAnswer,\n            query_type: \"fallback\",\n            data: null,\n            execution_time_ms: Date.now() - startTime\n        };\n    }\n}\nasync function parseQueryIntent(question, provider) {\n    // First try simple pattern matching as fallback\n    const fallbackIntent = inferIntentFromQuestion(question);\n    // If we don't have API keys, use fallback\n    if (!process.env.OPENAI_API_KEY && !process.env.GEMINI_API_KEY) {\n        console.log(\"No API keys available, using pattern matching fallback\");\n        return fallbackIntent;\n    }\n    const systemPrompt = `You are a query analyzer for a vector database. Parse the user's question and return a JSON object with the query intent.\n\nThe database contains image data with these fields:\n- name (artist name)\n- file_name (image filename)\n- image_url (URL to image)\n- url (style URL)\n\nAvailable query types:\n- \"count\": count items (e.g., \"how many artists\", \"count images\")\n- \"search\": find specific items (e.g., \"find Chris Dyer images\")\n- \"list\": list unique values (e.g., \"list all artists\")\n- \"filter\": filter by criteria (e.g., \"images with .jpeg extension\")\n- \"describe\": get general info (e.g., \"describe this collection\")\n\nReturn ONLY a JSON object in this format:\n{\n  \"type\": \"count|search|list|filter|describe\",\n  \"target\": \"what to count/search/list (e.g., 'artists', 'images', 'total')\",\n  \"filter\": {\"field\": \"value\"} or null,\n  \"limit\": number or null\n}\n\nExamples:\n- \"How many artists?\" → {\"type\": \"count\", \"target\": \"artists\", \"filter\": null, \"limit\": null}\n- \"Find Chris Dyer images\" → {\"type\": \"search\", \"target\": \"images\", \"filter\": {\"name\": \"Chris Dyer\"}, \"limit\": 10}\n- \"List all artists\" → {\"type\": \"list\", \"target\": \"artists\", \"filter\": null, \"limit\": null}`;\n    try {\n        let response;\n        if (provider === \"gemini\" && process.env.GEMINI_API_KEY) {\n            const model = genAI.getGenerativeModel({\n                model: \"gemini-1.5-flash\"\n            });\n            const result = await model.generateContent([\n                {\n                    text: systemPrompt\n                },\n                {\n                    text: `Question: \"${question}\"`\n                }, \n            ]);\n            response = result.response.text();\n        } else if (provider === \"openai\" && process.env.OPENAI_API_KEY) {\n            const completion = await openai.chat.completions.create({\n                model: \"gpt-3.5-turbo\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: systemPrompt\n                    },\n                    {\n                        role: \"user\",\n                        content: `Question: \"${question}\"`\n                    }, \n                ],\n                temperature: 0\n            });\n            response = completion.choices[0].message.content || \"{}\";\n        } else {\n            throw new Error(\"No valid API key for the specified provider\");\n        }\n        // Extract JSON from response (in case there's extra text)\n        const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n        const jsonStr = jsonMatch ? jsonMatch[0] : response;\n        return JSON.parse(jsonStr);\n    } catch (e) {\n        // Fallback parsing\n        console.warn(\"Failed to parse LLM response, using fallback:\", e);\n        return fallbackIntent;\n    }\n}\nfunction inferIntentFromQuestion(question) {\n    const q = question.toLowerCase();\n    if (q.includes(\"how many\") || q.includes(\"count\")) {\n        if (q.includes(\"artist\")) return {\n            type: \"count\",\n            target: \"artists\"\n        };\n        return {\n            type: \"count\",\n            target: \"total\"\n        };\n    }\n    if (q.includes(\"find\") || q.includes(\"search\")) {\n        // Try to extract artist name\n        const artistMatch = question.match(/(?:by|from|of)\\s+([A-Z][a-z]+\\s+[A-Z][a-z]+)/i);\n        if (artistMatch) {\n            return {\n                type: \"search\",\n                target: \"images\",\n                filter: {\n                    name: artistMatch[1]\n                },\n                limit: 10\n            };\n        }\n        return {\n            type: \"search\",\n            target: \"images\",\n            limit: 10\n        };\n    }\n    if (q.includes(\"list\") || q.includes(\"show\")) {\n        if (q.includes(\"artist\")) return {\n            type: \"list\",\n            target: \"artists\"\n        };\n        return {\n            type: \"list\",\n            target: \"images\",\n            limit: 20\n        };\n    }\n    return {\n        type: \"describe\",\n        target: \"collection\"\n    };\n}\nasync function executeQuery(collection, intent) {\n    switch(intent.type){\n        case \"count\":\n            if (intent.target === \"artists\") {\n                return await countUniqueArtists(collection);\n            } else {\n                return await countTotal(collection);\n            }\n        case \"search\":\n            return await searchImages(collection, intent.filter, intent.limit || 10);\n        case \"list\":\n            if (intent.target === \"artists\") {\n                return await listUniqueArtists(collection, intent.limit || 50);\n            } else {\n                return await listImages(collection, intent.limit || 20);\n            }\n        case \"filter\":\n            return await filterImages(collection, intent.filter, intent.limit || 20);\n        case \"describe\":\n            return await describeCollection(collection);\n        default:\n            throw new Error(`Unknown query type: ${intent.type}`);\n    }\n}\nasync function countTotal(collection) {\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.count(collection, {});\n    return {\n        count: response.count\n    };\n}\nasync function countUniqueArtists(collection) {\n    // Get sample of images to count unique artists\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.scroll(collection, {\n        limit: 1000,\n        with_payload: true,\n        with_vector: false\n    });\n    const artists = new Set(response.points.map((point)=>point.payload?.name).filter(Boolean));\n    return {\n        count: artists.size,\n        artists: Array.from(artists).slice(0, 20)\n    };\n}\nasync function searchImages(collection, filter, limit) {\n    // For now, let's get all images and filter in memory to avoid index requirements\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.scroll(collection, {\n        limit: 1000,\n        with_payload: true,\n        with_vector: false\n    });\n    let filteredPoints = response.points;\n    // Apply filters in memory if provided\n    if (filter) {\n        filteredPoints = response.points.filter((point)=>{\n            return Object.entries(filter).every(([key, value])=>{\n                return point.payload?.[key] === value;\n            });\n        });\n    }\n    // Limit results\n    const limitedPoints = filteredPoints.slice(0, limit);\n    return {\n        count: limitedPoints.length,\n        images: limitedPoints\n    };\n}\nasync function listUniqueArtists(collection, limit) {\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.scroll(collection, {\n        limit,\n        with_payload: true,\n        with_vector: false\n    });\n    const artists = new Set(response.points.map((point)=>point.payload?.name).filter(Boolean));\n    return {\n        artists: Array.from(artists)\n    };\n}\nasync function listImages(collection, limit) {\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.scroll(collection, {\n        limit,\n        with_payload: true,\n        with_vector: false\n    });\n    return {\n        count: response.points.length,\n        images: response.points.map((point)=>({\n                id: point.id,\n                artist: point.payload?.name,\n                filename: point.payload?.file_name\n            }))\n    };\n}\nasync function filterImages(collection, filter, limit) {\n    return await searchImages(collection, filter, limit);\n}\nasync function describeCollection(collection) {\n    const totalCount = await countTotal(collection);\n    const artistsData = await countUniqueArtists(collection);\n    const sampleImages = await listImages(collection, 5);\n    return {\n        total_images: totalCount.count,\n        unique_artists: artistsData.count,\n        sample_artists: artistsData.artists.slice(0, 10),\n        sample_images: sampleImages.images\n    };\n}\nasync function generateResponse(question, intent, data, provider) {\n    // Simple fallback responses\n    const fallbackResponse = generateFallbackResponse(question, intent, data);\n    // If no API keys, use fallback\n    if (!process.env.OPENAI_API_KEY && !process.env.GEMINI_API_KEY) {\n        return fallbackResponse;\n    }\n    const systemPrompt = `You are a helpful assistant that explains database query results in natural language.\n  \nThe user asked: \"${question}\"\nThe query type was: ${intent.type}\nThe data returned is: ${JSON.stringify(data, null, 2)}\n\nProvide a concise, natural language response that directly answers the user's question. Be specific with numbers and names when available.`;\n    try {\n        let response;\n        if (provider === \"gemini\" && process.env.GEMINI_API_KEY) {\n            const model = genAI.getGenerativeModel({\n                model: \"gemini-1.5-flash\"\n            });\n            const result = await model.generateContent(systemPrompt);\n            response = result.response.text();\n        } else if (provider === \"openai\" && process.env.OPENAI_API_KEY) {\n            const completion = await openai.chat.completions.create({\n                model: \"gpt-3.5-turbo\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: systemPrompt\n                    }\n                ],\n                temperature: 0.3,\n                max_tokens: 200\n            });\n            response = completion.choices[0].message.content || fallbackResponse;\n        } else {\n            return fallbackResponse;\n        }\n        return response.trim();\n    } catch (error) {\n        console.warn(\"Failed to generate LLM response, using fallback:\", error);\n        return fallbackResponse;\n    }\n}\nfunction generateFallbackResponse(question, intent, data) {\n    switch(intent.type){\n        case \"count\":\n            if (intent.target === \"artists\") {\n                return `I found ${data.count || 0} unique artists in the collection. Some of them include: ${data.artists?.slice(0, 5).join(\", \") || \"No artists found\"}.`;\n            } else {\n                return `The collection contains ${data.count || 0} total images.`;\n            }\n        case \"search\":\n        case \"filter\":\n            return `I found ${data.count || 0} images matching your criteria.`;\n        case \"list\":\n            if (intent.target === \"artists\") {\n                return `Here are the artists in the collection: ${data.artists?.slice(0, 10).join(\", \") || \"No artists found\"}${data.artists?.length > 10 ? \"...\" : \"\"}.`;\n            } else {\n                return `I found ${data.count || 0} items in the collection.`;\n            }\n        case \"describe\":\n            return `This collection contains ${data.total_images || 0} images from ${data.unique_artists || 0} unique artists. Some featured artists include: ${data.sample_artists?.slice(0, 5).join(\", \") || \"No artists found\"}.`;\n        default:\n            return \"I processed your query successfully using pattern matching.\";\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/qdrant/nlp-query.ts\n");

/***/ }),

/***/ "(api)/./pages/api/ask.ts":
/*!**************************!*\
  !*** ./pages/api/ask.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_qdrant_nlp_query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/qdrant/nlp-query */ \"(api)/./lib/qdrant/nlp-query.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_qdrant_nlp_query__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_qdrant_nlp_query__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nasync function handler(req, res) {\n    // Enable CORS\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    res.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS\");\n    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n    if (req.method === \"OPTIONS\") {\n        res.status(200).end();\n        return;\n    }\n    if (req.method !== \"POST\") {\n        res.setHeader(\"Allow\", [\n            \"POST\"\n        ]);\n        res.status(405).json({\n            error: `Method ${req.method} Not Allowed`\n        });\n        return;\n    }\n    try {\n        const { collection , question , provider  } = req.body;\n        if (!collection || !question) {\n            res.status(400).json({\n                error: \"Missing required fields: collection and question\"\n            });\n            return;\n        }\n        console.log(`Processing natural language query: \"${question}\" for collection: ${collection}`);\n        const result = await (0,_lib_qdrant_nlp_query__WEBPACK_IMPORTED_MODULE_0__.processNaturalQuery)(collection, question, provider || \"openai\");\n        // Transform the result to match NaturalQueryResponse interface\n        const response = {\n            question,\n            answer: result.answer,\n            query_type: result.query_type,\n            data: result.data,\n            execution_time_ms: result.execution_time_ms\n        };\n        res.status(200).json(response);\n    } catch (error) {\n        console.error(\"Error processing natural language query:\", error);\n        res.status(500).json({\n            error: error instanceof Error ? error.message : \"Internal server error\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvYXNrLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQ2lFO0FBR2xELGVBQWVDLE9BQU8sQ0FDbkNDLEdBQW1CLEVBQ25CQyxHQUE4RCxFQUM5RDtJQUNBLGNBQWM7SUFDZEEsR0FBRyxDQUFDQyxTQUFTLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbERELEdBQUcsQ0FBQ0MsU0FBUyxDQUFDLDhCQUE4QixFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFDcEVELEdBQUcsQ0FBQ0MsU0FBUyxDQUFDLDhCQUE4QixFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBRTlELElBQUlGLEdBQUcsQ0FBQ0csTUFBTSxLQUFLLFNBQVMsRUFBRTtRQUM1QkYsR0FBRyxDQUFDRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLE9BQU87SUFDVCxDQUFDO0lBRUQsSUFBSUwsR0FBRyxDQUFDRyxNQUFNLEtBQUssTUFBTSxFQUFFO1FBQ3pCRixHQUFHLENBQUNDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7WUFBQyxNQUFNO1NBQUMsQ0FBQyxDQUFDO1FBQ2pDRCxHQUFHLENBQUNHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0UsSUFBSSxDQUFDO1lBQUVDLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRVAsR0FBRyxDQUFDRyxNQUFNLENBQUMsWUFBWSxDQUFDO1NBQUUsQ0FBQyxDQUFDO1FBQ3BFLE9BQU87SUFDVCxDQUFDO0lBRUQsSUFBSTtRQUNGLE1BQU0sRUFBRUssVUFBVSxHQUFFQyxRQUFRLEdBQUVDLFFBQVEsR0FBRSxHQUFHVixHQUFHLENBQUNXLElBQUk7UUFFbkQsSUFBSSxDQUFDSCxVQUFVLElBQUksQ0FBQ0MsUUFBUSxFQUFFO1lBQzVCUixHQUFHLENBQUNHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0UsSUFBSSxDQUFDO2dCQUNuQkMsS0FBSyxFQUFFLGtEQUFrRDthQUMxRCxDQUFDLENBQUM7WUFDSCxPQUFPO1FBQ1QsQ0FBQztRQUVESyxPQUFPLENBQUNDLEdBQUcsQ0FDVCxDQUFDLG9DQUFvQyxFQUFFSixRQUFRLENBQUMsa0JBQWtCLEVBQUVELFVBQVUsQ0FBQyxDQUFDLENBQ2pGLENBQUM7UUFFRixNQUFNTSxNQUFNLEdBQUcsTUFBTWhCLDBFQUFtQixDQUN0Q1UsVUFBVSxFQUNWQyxRQUFRLEVBQ1JDLFFBQVEsSUFBSSxRQUFRLENBQ3JCO1FBRUQsK0RBQStEO1FBQy9ELE1BQU1LLFFBQVEsR0FBeUI7WUFDckNOLFFBQVE7WUFDUk8sTUFBTSxFQUFFRixNQUFNLENBQUNFLE1BQU07WUFDckJDLFVBQVUsRUFBRUgsTUFBTSxDQUFDRyxVQUFVO1lBQzdCQyxJQUFJLEVBQUVKLE1BQU0sQ0FBQ0ksSUFBSTtZQUNqQkMsaUJBQWlCLEVBQUVMLE1BQU0sQ0FBQ0ssaUJBQWlCO1NBQzVDO1FBRURsQixHQUFHLENBQUNHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0UsSUFBSSxDQUFDUyxRQUFRLENBQUMsQ0FBQztJQUNqQyxFQUFFLE9BQU9SLEtBQUssRUFBRTtRQUNkSyxPQUFPLENBQUNMLEtBQUssQ0FBQywwQ0FBMEMsRUFBRUEsS0FBSyxDQUFDLENBQUM7UUFDakVOLEdBQUcsQ0FBQ0csTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDRSxJQUFJLENBQUM7WUFDbkJDLEtBQUssRUFBRUEsS0FBSyxZQUFZYSxLQUFLLEdBQUdiLEtBQUssQ0FBQ2MsT0FBTyxHQUFHLHVCQUF1QjtTQUN4RSxDQUFDLENBQUM7SUFDTCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3llYXJuLy4vcGFnZXMvYXBpL2Fzay50cz82NjQzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgTmV4dEFwaVJlcXVlc3QsIE5leHRBcGlSZXNwb25zZSB9IGZyb20gXCJuZXh0XCI7XG5pbXBvcnQgeyBwcm9jZXNzTmF0dXJhbFF1ZXJ5IH0gZnJvbSBcIi4uLy4uL2xpYi9xZHJhbnQvbmxwLXF1ZXJ5XCI7XG5pbXBvcnQgeyBOYXR1cmFsUXVlcnlSZXF1ZXN0LCBOYXR1cmFsUXVlcnlSZXNwb25zZSB9IGZyb20gXCIuLi8uLi9saWIvdHlwZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihcbiAgcmVxOiBOZXh0QXBpUmVxdWVzdCxcbiAgcmVzOiBOZXh0QXBpUmVzcG9uc2U8TmF0dXJhbFF1ZXJ5UmVzcG9uc2UgfCB7IGVycm9yOiBzdHJpbmcgfT5cbikge1xuICAvLyBFbmFibGUgQ09SU1xuICByZXMuc2V0SGVhZGVyKFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCIsIFwiKlwiKTtcbiAgcmVzLnNldEhlYWRlcihcIkFjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHNcIiwgXCJHRVQsIFBPU1QsIE9QVElPTlNcIik7XG4gIHJlcy5zZXRIZWFkZXIoXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzXCIsIFwiQ29udGVudC1UeXBlXCIpO1xuXG4gIGlmIChyZXEubWV0aG9kID09PSBcIk9QVElPTlNcIikge1xuICAgIHJlcy5zdGF0dXMoMjAwKS5lbmQoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAocmVxLm1ldGhvZCAhPT0gXCJQT1NUXCIpIHtcbiAgICByZXMuc2V0SGVhZGVyKFwiQWxsb3dcIiwgW1wiUE9TVFwiXSk7XG4gICAgcmVzLnN0YXR1cyg0MDUpLmpzb24oeyBlcnJvcjogYE1ldGhvZCAke3JlcS5tZXRob2R9IE5vdCBBbGxvd2VkYCB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IHsgY29sbGVjdGlvbiwgcXVlc3Rpb24sIHByb3ZpZGVyIH0gPSByZXEuYm9keSBhcyBOYXR1cmFsUXVlcnlSZXF1ZXN0O1xuXG4gICAgaWYgKCFjb2xsZWN0aW9uIHx8ICFxdWVzdGlvbikge1xuICAgICAgcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogXCJNaXNzaW5nIHJlcXVpcmVkIGZpZWxkczogY29sbGVjdGlvbiBhbmQgcXVlc3Rpb25cIixcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYFByb2Nlc3NpbmcgbmF0dXJhbCBsYW5ndWFnZSBxdWVyeTogXCIke3F1ZXN0aW9ufVwiIGZvciBjb2xsZWN0aW9uOiAke2NvbGxlY3Rpb259YFxuICAgICk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm9jZXNzTmF0dXJhbFF1ZXJ5KFxuICAgICAgY29sbGVjdGlvbixcbiAgICAgIHF1ZXN0aW9uLFxuICAgICAgcHJvdmlkZXIgfHwgXCJvcGVuYWlcIlxuICAgICk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gdGhlIHJlc3VsdCB0byBtYXRjaCBOYXR1cmFsUXVlcnlSZXNwb25zZSBpbnRlcmZhY2VcbiAgICBjb25zdCByZXNwb25zZTogTmF0dXJhbFF1ZXJ5UmVzcG9uc2UgPSB7XG4gICAgICBxdWVzdGlvbixcbiAgICAgIGFuc3dlcjogcmVzdWx0LmFuc3dlcixcbiAgICAgIHF1ZXJ5X3R5cGU6IHJlc3VsdC5xdWVyeV90eXBlLFxuICAgICAgZGF0YTogcmVzdWx0LmRhdGEsXG4gICAgICBleGVjdXRpb25fdGltZV9tczogcmVzdWx0LmV4ZWN1dGlvbl90aW1lX21zLFxuICAgIH07XG5cbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbihyZXNwb25zZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIHByb2Nlc3NpbmcgbmF0dXJhbCBsYW5ndWFnZSBxdWVyeTpcIiwgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFwiSW50ZXJuYWwgc2VydmVyIGVycm9yXCIsXG4gICAgfSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJwcm9jZXNzTmF0dXJhbFF1ZXJ5IiwiaGFuZGxlciIsInJlcSIsInJlcyIsInNldEhlYWRlciIsIm1ldGhvZCIsInN0YXR1cyIsImVuZCIsImpzb24iLCJlcnJvciIsImNvbGxlY3Rpb24iLCJxdWVzdGlvbiIsInByb3ZpZGVyIiwiYm9keSIsImNvbnNvbGUiLCJsb2ciLCJyZXN1bHQiLCJyZXNwb25zZSIsImFuc3dlciIsInF1ZXJ5X3R5cGUiLCJkYXRhIiwiZXhlY3V0aW9uX3RpbWVfbXMiLCJFcnJvciIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./pages/api/ask.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/ask.ts"));
module.exports = __webpack_exports__;

})();