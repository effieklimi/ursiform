"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/ask";
exports.ids = ["pages/api/ask"];
exports.modules = {

/***/ "@google/generative-ai":
/*!****************************************!*\
  !*** external "@google/generative-ai" ***!
  \****************************************/
/***/ ((module) => {

module.exports = import("@google/generative-ai");;

/***/ }),

/***/ "@qdrant/js-client-rest":
/*!*****************************************!*\
  !*** external "@qdrant/js-client-rest" ***!
  \*****************************************/
/***/ ((module) => {

module.exports = import("@qdrant/js-client-rest");;

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("openai");;

/***/ }),

/***/ "(api)/./lib/qdrant/db.ts":
/*!**************************!*\
  !*** ./lib/qdrant/db.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"client\": () => (/* binding */ client),\n/* harmony export */   \"createCollection\": () => (/* binding */ createCollection),\n/* harmony export */   \"testConnection\": () => (/* binding */ testConnection)\n/* harmony export */ });\n/* harmony import */ var _qdrant_js_client_rest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @qdrant/js-client-rest */ \"@qdrant/js-client-rest\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_qdrant_js_client_rest__WEBPACK_IMPORTED_MODULE_0__]);\n_qdrant_js_client_rest__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// Initialize client with support for both local and cloud instances\nconst qdrantUrl = \"https://1555b3af-2ea7-409c-83a3-3a49207ac217.us-east4-0.gcp.cloud.qdrant.io:6333\" || 0;\nconst qdrantApiKey = process.env.QDRANT_API_KEY;\nlet clientConfig;\n// For cloud instances, use the recommended format from documentation\nif (qdrantApiKey) {\n    // Parse the URL to extract host\n    const url = new URL(qdrantUrl);\n    const host = url.hostname;\n    const isHttps = url.protocol === \"https:\";\n    clientConfig = {\n        host: host,\n        port: null,\n        https: isHttps,\n        apiKey: qdrantApiKey\n    };\n    console.log(`Connecting to Qdrant Cloud at ${host} (HTTPS: ${isHttps})`);\n} else {\n    // For local instances without API key\n    clientConfig = {\n        url: qdrantUrl\n    };\n    console.log(`Connecting to local Qdrant at ${qdrantUrl}`);\n}\nconst client = new _qdrant_js_client_rest__WEBPACK_IMPORTED_MODULE_0__.QdrantClient(clientConfig);\n\n// Test Qdrant connection\nasync function testConnection() {\n    try {\n        // Use getCollections as a simple health check\n        await client.getCollections();\n        console.log(\"Qdrant connection successful\");\n        return true;\n    } catch (error) {\n        console.error(\"Qdrant connection failed:\", error);\n        return false;\n    }\n}\nasync function createCollection(name = \"my_collection\", dimension = 768) {\n    try {\n        // First test the connection\n        const isConnected = await testConnection();\n        if (!isConnected) {\n            throw new Error(\"Cannot connect to Qdrant database. Please check your configuration.\");\n        }\n        // Check if collection already exists\n        try {\n            await client.getCollection(name);\n            console.log(`Collection \"${name}\" already exists`);\n            return;\n        } catch (error) {\n            // Collection doesn't exist, create it\n            console.log(`Collection \"${name}\" does not exist, creating...`);\n            // Check if it's a different error than \"not found\"\n            if (error.status && error.status !== 404) {\n                console.error(\"Unexpected error checking collection:\", error);\n                throw error;\n            }\n        }\n        await client.createCollection(name, {\n            vectors: {\n                size: dimension,\n                distance: \"Cosine\"\n            }\n        });\n        console.log(`Collection \"${name}\" created successfully with dimension ${dimension}`);\n    } catch (error1) {\n        console.error(`Error creating collection \"${name}\":`, error1);\n        // Provide more specific error messages\n        if (error1.message?.includes(\"authentication\") || error1.status === 401 || error1.status === 403) {\n            throw new Error(\"Authentication failed. Please check your QDRANT_API_KEY and QDRANT_URL.\");\n        } else if (error1.message?.includes(\"connection\") || error1.code === \"ECONNREFUSED\") {\n            throw new Error(\"Cannot connect to Qdrant. Please check your QDRANT_URL.\");\n        } else {\n            throw error1;\n        }\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q2xDTSxPQUFPLEVBQUU7Z0JBQ1BDLElBQUksRUFBRU4sU0FBUztnQkFDZk8sUUFBUSxFQUFFLFFBQVE7YUFDbkI7U0FDRixDQUFDLENBQUM7UUFFSGYsT0FBTyxDQUFDQyxHQUFHLENBQ1QsQ0FBQyxZQUFZLEVBQUVNLElBQUksQ0FBQyxzQ0FBc0MsRUFBRUMsU0FBUyxDQUFDLENBQUMsQ0FDeEUsQ0FBQztJQUNKLEVBQUUsT0FBT0gsTUFBSyxFQUFPO1FBQ25CTCxPQUFPLENBQUNLLEtBQUssQ0FBQyxDQUFDLDJCQUEyQixFQUFFRSxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUVGLE1BQUssQ0FBQyxDQUFDO1FBRTdELHVDQUF1QztRQUN2QyxJQUNFQSxNQUFLLENBQUNXLE9BQU8sRUFBRUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLElBQ3pDWixNQUFLLENBQUNPLE1BQU0sS0FBSyxHQUFHLElBQ3BCUCxNQUFLLENBQUNPLE1BQU0sS0FBSyxHQUFHLEVBQ3BCO1lBQ0EsTUFBTSxJQUFJRixLQUFLLENBQ2IseUVBQXlFLENBQzFFLENBQUM7UUFDSixPQUFPLElBQ0xMLE1BQUssQ0FBQ1csT0FBTyxFQUFFQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQ3JDWixNQUFLLENBQUNhLElBQUksS0FBSyxjQUFjLEVBQzdCO1lBQ0EsTUFBTSxJQUFJUixLQUFLLENBQ2IseURBQXlELENBQzFELENBQUM7UUFDSixPQUFPO1lBQ0wsTUFBTUwsTUFBSyxDQUFDO1FBQ2QsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veWVhcm4vLi9saWIvcWRyYW50L2RiLnRzPzM5NjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUWRyYW50Q2xpZW50IH0gZnJvbSBcIkBxZHJhbnQvanMtY2xpZW50LXJlc3RcIjtcblxuLy8gSW5pdGlhbGl6ZSBjbGllbnQgd2l0aCBzdXBwb3J0IGZvciBib3RoIGxvY2FsIGFuZCBjbG91ZCBpbnN0YW5jZXNcbmNvbnN0IHFkcmFudFVybCA9IHByb2Nlc3MuZW52LlFEUkFOVF9VUkwgfHwgXCJodHRwOi8vbG9jYWxob3N0OjYzMzNcIjtcbmNvbnN0IHFkcmFudEFwaUtleSA9IHByb2Nlc3MuZW52LlFEUkFOVF9BUElfS0VZO1xuXG5sZXQgY2xpZW50Q29uZmlnOiBhbnk7XG5cbi8vIEZvciBjbG91ZCBpbnN0YW5jZXMsIHVzZSB0aGUgcmVjb21tZW5kZWQgZm9ybWF0IGZyb20gZG9jdW1lbnRhdGlvblxuaWYgKHFkcmFudEFwaUtleSkge1xuICAvLyBQYXJzZSB0aGUgVVJMIHRvIGV4dHJhY3QgaG9zdFxuICBjb25zdCB1cmwgPSBuZXcgVVJMKHFkcmFudFVybCk7XG4gIGNvbnN0IGhvc3QgPSB1cmwuaG9zdG5hbWU7XG4gIGNvbnN0IGlzSHR0cHMgPSB1cmwucHJvdG9jb2wgPT09IFwiaHR0cHM6XCI7XG5cbiAgY2xpZW50Q29uZmlnID0ge1xuICAgIGhvc3Q6IGhvc3QsXG4gICAgcG9ydDogbnVsbCwgLy8gVGhpcyBpcyBjcml0aWNhbCBmb3IgY2xvdWQgaW5zdGFuY2VzIC0gcHJldmVudHMgOjYzMzMgYmVpbmcgYXBwZW5kZWRcbiAgICBodHRwczogaXNIdHRwcyxcbiAgICBhcGlLZXk6IHFkcmFudEFwaUtleSxcbiAgfTtcblxuICBjb25zb2xlLmxvZyhgQ29ubmVjdGluZyB0byBRZHJhbnQgQ2xvdWQgYXQgJHtob3N0fSAoSFRUUFM6ICR7aXNIdHRwc30pYCk7XG59IGVsc2Uge1xuICAvLyBGb3IgbG9jYWwgaW5zdGFuY2VzIHdpdGhvdXQgQVBJIGtleVxuICBjbGllbnRDb25maWcgPSB7XG4gICAgdXJsOiBxZHJhbnRVcmwsXG4gIH07XG5cbiAgY29uc29sZS5sb2coYENvbm5lY3RpbmcgdG8gbG9jYWwgUWRyYW50IGF0ICR7cWRyYW50VXJsfWApO1xufVxuXG5jb25zdCBjbGllbnQgPSBuZXcgUWRyYW50Q2xpZW50KGNsaWVudENvbmZpZyk7XG5cbmV4cG9ydCB7IGNsaWVudCB9O1xuXG4vLyBUZXN0IFFkcmFudCBjb25uZWN0aW9uXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdGVzdENvbm5lY3Rpb24oKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIHRyeSB7XG4gICAgLy8gVXNlIGdldENvbGxlY3Rpb25zIGFzIGEgc2ltcGxlIGhlYWx0aCBjaGVja1xuICAgIGF3YWl0IGNsaWVudC5nZXRDb2xsZWN0aW9ucygpO1xuICAgIGNvbnNvbGUubG9nKFwiUWRyYW50IGNvbm5lY3Rpb24gc3VjY2Vzc2Z1bFwiKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiUWRyYW50IGNvbm5lY3Rpb24gZmFpbGVkOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVDb2xsZWN0aW9uKFxuICBuYW1lOiBzdHJpbmcgPSBcIm15X2NvbGxlY3Rpb25cIixcbiAgZGltZW5zaW9uOiBudW1iZXIgPSA3Njhcbik6IFByb21pc2U8dm9pZD4ge1xuICB0cnkge1xuICAgIC8vIEZpcnN0IHRlc3QgdGhlIGNvbm5lY3Rpb25cbiAgICBjb25zdCBpc0Nvbm5lY3RlZCA9IGF3YWl0IHRlc3RDb25uZWN0aW9uKCk7XG4gICAgaWYgKCFpc0Nvbm5lY3RlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIkNhbm5vdCBjb25uZWN0IHRvIFFkcmFudCBkYXRhYmFzZS4gUGxlYXNlIGNoZWNrIHlvdXIgY29uZmlndXJhdGlvbi5cIlxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiBjb2xsZWN0aW9uIGFscmVhZHkgZXhpc3RzXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGNsaWVudC5nZXRDb2xsZWN0aW9uKG5hbWUpO1xuICAgICAgY29uc29sZS5sb2coYENvbGxlY3Rpb24gXCIke25hbWV9XCIgYWxyZWFkeSBleGlzdHNgKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAvLyBDb2xsZWN0aW9uIGRvZXNuJ3QgZXhpc3QsIGNyZWF0ZSBpdFxuICAgICAgY29uc29sZS5sb2coYENvbGxlY3Rpb24gXCIke25hbWV9XCIgZG9lcyBub3QgZXhpc3QsIGNyZWF0aW5nLi4uYCk7XG5cbiAgICAgIC8vIENoZWNrIGlmIGl0J3MgYSBkaWZmZXJlbnQgZXJyb3IgdGhhbiBcIm5vdCBmb3VuZFwiXG4gICAgICBpZiAoZXJyb3Iuc3RhdHVzICYmIGVycm9yLnN0YXR1cyAhPT0gNDA0KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVbmV4cGVjdGVkIGVycm9yIGNoZWNraW5nIGNvbGxlY3Rpb246XCIsIGVycm9yKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYXdhaXQgY2xpZW50LmNyZWF0ZUNvbGxlY3Rpb24obmFtZSwge1xuICAgICAgdmVjdG9yczoge1xuICAgICAgICBzaXplOiBkaW1lbnNpb24sXG4gICAgICAgIGRpc3RhbmNlOiBcIkNvc2luZVwiLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYENvbGxlY3Rpb24gXCIke25hbWV9XCIgY3JlYXRlZCBzdWNjZXNzZnVsbHkgd2l0aCBkaW1lbnNpb24gJHtkaW1lbnNpb259YFxuICAgICk7XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKGBFcnJvciBjcmVhdGluZyBjb2xsZWN0aW9uIFwiJHtuYW1lfVwiOmAsIGVycm9yKTtcblxuICAgIC8vIFByb3ZpZGUgbW9yZSBzcGVjaWZpYyBlcnJvciBtZXNzYWdlc1xuICAgIGlmIChcbiAgICAgIGVycm9yLm1lc3NhZ2U/LmluY2x1ZGVzKFwiYXV0aGVudGljYXRpb25cIikgfHxcbiAgICAgIGVycm9yLnN0YXR1cyA9PT0gNDAxIHx8XG4gICAgICBlcnJvci5zdGF0dXMgPT09IDQwM1xuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIkF1dGhlbnRpY2F0aW9uIGZhaWxlZC4gUGxlYXNlIGNoZWNrIHlvdXIgUURSQU5UX0FQSV9LRVkgYW5kIFFEUkFOVF9VUkwuXCJcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGVycm9yLm1lc3NhZ2U/LmluY2x1ZGVzKFwiY29ubmVjdGlvblwiKSB8fFxuICAgICAgZXJyb3IuY29kZSA9PT0gXCJFQ09OTlJFRlVTRURcIlxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIkNhbm5vdCBjb25uZWN0IHRvIFFkcmFudC4gUGxlYXNlIGNoZWNrIHlvdXIgUURSQU5UX1VSTC5cIlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsiUWRyYW50Q2xpZW50IiwicWRyYW50VXJsIiwicHJvY2VzcyIsImVudiIsIlFEUkFOVF9VUkwiLCJxZHJhbnRBcGlLZXkiLCJRRFJBTlRfQVBJX0tFWSIsImNsaWVudENvbmZpZyIsInVybCIsIlVSTCIsImhvc3QiLCJob3N0bmFtZSIsImlzSHR0cHMiLCJwcm90b2NvbCIsInBvcnQiLCJodHRwcyIsImFwaUtleSIsImNvbnNvbGUiLCJsb2ciLCJjbGllbnQiLCJ0ZXN0Q29ubmVjdGlvbiIsImdldENvbGxlY3Rpb25zIiwiZXJyb3IiLCJjcmVhdGVDb2xsZWN0aW9uIiwibmFtZSIsImRpbWVuc2lvbiIsImlzQ29ubmVjdGVkIiwiRXJyb3IiLCJnZXRDb2xsZWN0aW9uIiwic3RhdHVzIiwidmVjdG9ycyIsInNpemUiLCJkaXN0YW5jZSIsIm1lc3NhZ2UiLCJpbmNsdWRlcyIsImNvZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./lib/qdrant/db.ts\n");

/***/ }),

/***/ "(api)/./lib/qdrant/nlp-query.ts":
/*!*********************************!*\
  !*** ./lib/qdrant/nlp-query.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"processNaturalQuery\": () => (/* binding */ processNaturalQuery)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @google/generative-ai */ \"@google/generative-ai\");\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./db */ \"(api)/./lib/qdrant/db.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([openai__WEBPACK_IMPORTED_MODULE_0__, _google_generative_ai__WEBPACK_IMPORTED_MODULE_1__, _db__WEBPACK_IMPORTED_MODULE_2__]);\n([openai__WEBPACK_IMPORTED_MODULE_0__, _google_generative_ai__WEBPACK_IMPORTED_MODULE_1__, _db__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_1__.GoogleGenerativeAI(process.env.GEMINI_API_KEY || \"\");\nasync function processNaturalQuery(collection, question, provider = \"openai\") {\n    const startTime = Date.now();\n    try {\n        // Step 1: Understand the intent using LLM\n        const intent = await parseQueryIntent(question, provider);\n        // Step 2: Use extracted collection name if available and no explicit collection provided\n        const finalCollection = collection || intent.extractedCollection || null;\n        // Step 3: Execute the appropriate operation (database or collection level)\n        const result = await executeQuery(finalCollection, intent);\n        // Step 4: Generate natural language response\n        const answer = await generateResponse(question, intent, result, provider);\n        const execution_time_ms = Date.now() - startTime;\n        return {\n            answer,\n            query_type: intent.type,\n            data: result,\n            execution_time_ms\n        };\n    } catch (error) {\n        console.error(\"Error processing natural query:\", error);\n        // Create fallback response even if everything fails\n        const fallbackAnswer = \"I encountered an issue processing your query, but I'm using pattern matching to help. \" + generateFallbackResponse(question, inferIntentFromQuestion(question), {\n            count: 0\n        });\n        return {\n            answer: fallbackAnswer,\n            query_type: \"fallback\",\n            data: null,\n            execution_time_ms: Date.now() - startTime\n        };\n    }\n}\nasync function parseQueryIntent(question, provider) {\n    // First try simple pattern matching as fallback\n    const fallbackIntent = inferIntentFromQuestion(question);\n    // If we don't have API keys, use fallback\n    if (!process.env.OPENAI_API_KEY && !process.env.GEMINI_API_KEY) {\n        console.log(\"No API keys available, using pattern matching fallback\");\n        return fallbackIntent;\n    }\n    const systemPrompt = `You are a query analyzer for a vector database system. Parse the user's question and return a JSON object with the query intent.\n\nThe system contains multiple collections, each with image data with these fields:\n- name (artist name)\n- file_name (image filename)\n- image_url (URL to image)\n- url (style URL)\n\nAvailable query types:\n- \"count\": count items (e.g., \"how many artists\", \"count images\")\n- \"search\": find specific items (e.g., \"find Chris Dyer images\")\n- \"list\": list unique values (e.g., \"list all artists\")\n- \"filter\": filter by criteria (e.g., \"images with .jpeg extension\")\n- \"describe\": get general info (e.g., \"describe this collection\")\n- \"collections\": collection management (e.g., \"what collections exist\", \"list collections\")\n- \"database\": database-level queries (e.g., \"describe the database\", \"how many collections\")\n\nAvailable scopes:\n- \"collection\": query operates on a specific collection\n- \"database\": query operates on the entire database\n\nReturn ONLY a JSON object in this format:\n{\n  \"type\": \"count|search|list|filter|describe|collections|database\",\n  \"target\": \"what to count/search/list (e.g., 'artists', 'images', 'collections')\",\n  \"filter\": {\"field\": \"value\"} or null,\n  \"limit\": number or null,\n  \"scope\": \"collection|database\",\n  \"extractedCollection\": \"collection_name_if_mentioned_in_query\" or null\n}\n\nExamples:\n- \"How many artists?\" → {\"type\": \"count\", \"target\": \"artists\", \"filter\": null, \"limit\": null, \"scope\": \"database\", \"extractedCollection\": null}\n- \"How many artists in midjourneysample?\" → {\"type\": \"count\", \"target\": \"artists\", \"filter\": null, \"limit\": null, \"scope\": \"collection\", \"extractedCollection\": \"midjourneysample\"}\n- \"What collections exist?\" → {\"type\": \"collections\", \"target\": \"list\", \"filter\": null, \"limit\": null, \"scope\": \"database\", \"extractedCollection\": null}\n- \"How many collections are there?\" → {\"type\": \"count\", \"target\": \"collections\", \"filter\": null, \"limit\": null, \"scope\": \"database\", \"extractedCollection\": null}\n- \"Describe the database\" → {\"type\": \"database\", \"target\": \"overview\", \"filter\": null, \"limit\": null, \"scope\": \"database\", \"extractedCollection\": null}\n- \"Find Chris Dyer images across all collections\" → {\"type\": \"search\", \"target\": \"images\", \"filter\": {\"name\": \"Chris Dyer\"}, \"limit\": 10, \"scope\": \"database\", \"extractedCollection\": null}\n- \"How many vectors in test_collection?\" → {\"type\": \"count\", \"target\": \"total\", \"filter\": null, \"limit\": null, \"scope\": \"collection\", \"extractedCollection\": \"test_collection\"}`;\n    try {\n        let response;\n        if (provider === \"gemini\" && process.env.GEMINI_API_KEY) {\n            const model = genAI.getGenerativeModel({\n                model: \"gemini-2.0-flash\"\n            });\n            const result = await model.generateContent([\n                {\n                    text: systemPrompt\n                },\n                {\n                    text: `Question: \"${question}\"`\n                }, \n            ]);\n            response = result.response.text();\n        } else if (provider === \"openai\" && process.env.OPENAI_API_KEY) {\n            const completion = await openai.chat.completions.create({\n                model: \"gpt-3.5-turbo\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: systemPrompt\n                    },\n                    {\n                        role: \"user\",\n                        content: `Question: \"${question}\"`\n                    }, \n                ],\n                temperature: 0\n            });\n            response = completion.choices[0].message.content || \"{}\";\n        } else {\n            throw new Error(\"No valid API key for the specified provider\");\n        }\n        // Extract JSON from response (in case there's extra text)\n        const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n        const jsonStr = jsonMatch ? jsonMatch[0] : response;\n        return JSON.parse(jsonStr);\n    } catch (e) {\n        // Fallback parsing\n        console.warn(\"Failed to parse LLM response, using fallback:\", e);\n        return fallbackIntent;\n    }\n}\nfunction inferIntentFromQuestion(question) {\n    const q = question.toLowerCase();\n    // Try to extract collection name from the question\n    const extractedCollection = extractCollectionFromQuestion(question);\n    // Database-level queries\n    if (q.includes(\"collections\") || q.includes(\"database\")) {\n        if (q.includes(\"how many\") || q.includes(\"count\")) {\n            return {\n                type: \"count\",\n                target: \"collections\",\n                scope: \"database\"\n            };\n        }\n        if (q.includes(\"list\") || q.includes(\"what\") || q.includes(\"show\")) {\n            return {\n                type: \"collections\",\n                target: \"list\",\n                scope: \"database\"\n            };\n        }\n        if (q.includes(\"describe\")) {\n            return {\n                type: \"database\",\n                target: \"overview\",\n                scope: \"database\"\n            };\n        }\n    }\n    // Collection-level queries (existing logic)\n    if (q.includes(\"how many\") || q.includes(\"count\")) {\n        if (q.includes(\"artist\")) {\n            return {\n                type: \"count\",\n                target: \"artists\",\n                scope: extractedCollection ? \"collection\" : \"database\",\n                ...extractedCollection && {\n                    extractedCollection\n                }\n            };\n        }\n        if (q.includes(\"vector\") || q.includes(\"image\") || q.includes(\"item\")) {\n            return {\n                type: \"count\",\n                target: \"total\",\n                scope: extractedCollection ? \"collection\" : \"database\",\n                ...extractedCollection && {\n                    extractedCollection\n                }\n            };\n        }\n        return {\n            type: \"count\",\n            target: \"total\",\n            scope: extractedCollection ? \"collection\" : \"database\",\n            ...extractedCollection && {\n                extractedCollection\n            }\n        };\n    }\n    if (q.includes(\"find\") || q.includes(\"search\")) {\n        // Check if it's across all collections\n        const scope = q.includes(\"all collections\") || q.includes(\"across\") ? \"database\" : extractedCollection ? \"collection\" : \"database\";\n        // Try to extract artist name\n        const artistMatch = question.match(/(?:by|from|of)\\s+([A-Z][a-z]+\\s+[A-Z][a-z]+)/i);\n        if (artistMatch) {\n            return {\n                type: \"search\",\n                target: \"images\",\n                filter: {\n                    name: artistMatch[1]\n                },\n                limit: 10,\n                scope,\n                ...extractedCollection && {\n                    extractedCollection\n                }\n            };\n        }\n        return {\n            type: \"search\",\n            target: \"images\",\n            limit: 10,\n            scope,\n            ...extractedCollection && {\n                extractedCollection\n            }\n        };\n    }\n    if (q.includes(\"list\") || q.includes(\"show\")) {\n        if (q.includes(\"artist\")) {\n            return {\n                type: \"list\",\n                target: \"artists\",\n                scope: extractedCollection ? \"collection\" : \"database\",\n                ...extractedCollection && {\n                    extractedCollection\n                }\n            };\n        }\n        return {\n            type: \"list\",\n            target: \"images\",\n            limit: 20,\n            scope: extractedCollection ? \"collection\" : \"database\",\n            ...extractedCollection && {\n                extractedCollection\n            }\n        };\n    }\n    if (q.includes(\"describe\")) {\n        return {\n            type: \"describe\",\n            target: extractedCollection ? \"collection\" : \"database\",\n            scope: extractedCollection ? \"collection\" : \"database\",\n            ...extractedCollection && {\n                extractedCollection\n            }\n        };\n    }\n    return {\n        type: \"describe\",\n        target: \"collection\",\n        scope: extractedCollection ? \"collection\" : \"database\",\n        ...extractedCollection && {\n            extractedCollection\n        }\n    };\n}\n// New function to extract collection names from natural language\nfunction extractCollectionFromQuestion(question) {\n    const q = question.toLowerCase();\n    // Common patterns for mentioning collections\n    const patterns = [\n        // \"in [collection]\" or \"from [collection]\"\n        /(?:in|from)\\s+([a-zA-Z][a-zA-Z0-9_-]*)/g,\n        // \"[collection] collection\"\n        /([a-zA-Z][a-zA-Z0-9_-]*)\\s+collection/g,\n        // \"collection [collection]\"\n        /collection\\s+([a-zA-Z][a-zA-Z0-9_-]*)/g, \n    ];\n    for (const pattern of patterns){\n        const matches = [\n            ...q.matchAll(pattern)\n        ];\n        for (const match of matches){\n            const candidate = match[1];\n            // Filter out common words that aren't collection names\n            if (![\n                \"the\",\n                \"this\",\n                \"that\",\n                \"my\",\n                \"your\",\n                \"our\",\n                \"their\",\n                \"all\",\n                \"some\",\n                \"any\",\n                \"each\",\n                \"every\", \n            ].includes(candidate)) {\n                return candidate;\n            }\n        }\n    }\n    // Look for specific common collection names that might appear without prepositions\n    const commonCollectionNames = [\n        \"midjourneysample\",\n        \"test_collection\",\n        \"my_docs\",\n        \"test_small\",\n        \"new_test_yearn\",\n        \"docs_openai\",\n        \"docs_gemini\", \n    ];\n    for (const name of commonCollectionNames){\n        if (q.includes(name)) {\n            return name;\n        }\n    }\n    return undefined;\n}\nasync function executeQuery(collection, intent) {\n    if (intent.scope === \"database\") {\n        return await executeDatabaseQuery(intent);\n    } else {\n        // Collection-level query - require collection name\n        if (!collection) {\n            throw new Error(\"Collection name is required for collection-level queries\");\n        }\n        return await executeCollectionQuery(collection, intent);\n    }\n}\nasync function executeDatabaseQuery(intent) {\n    switch(intent.type){\n        case \"count\":\n            if (intent.target === \"collections\") {\n                return await countCollections();\n            }\n            if (intent.target === \"artists\") {\n                return await countArtistsAcrossDatabase();\n            }\n            if (intent.target === \"total\") {\n                return await countTotalVectorsAcrossDatabase();\n            }\n            break;\n        case \"collections\":\n            return await listCollections();\n        case \"database\":\n            return await describeDatabaseInfo();\n        case \"search\":\n            if (intent.filter) {\n                return await searchAcrossCollections(intent.filter, intent.limit || 10);\n            }\n            break;\n        case \"list\":\n            if (intent.target === \"artists\") {\n                return await listArtistsAcrossDatabase(intent.limit || 50);\n            }\n            break;\n        default:\n            throw new Error(`Database-level query type '${intent.type}' not implemented yet`);\n    }\n}\nasync function executeCollectionQuery(collection, intent) {\n    switch(intent.type){\n        case \"count\":\n            if (intent.target === \"artists\") {\n                return await countUniqueArtists(collection);\n            } else {\n                return await countTotal(collection);\n            }\n        case \"search\":\n            return await searchImages(collection, intent.filter, intent.limit || 10);\n        case \"list\":\n            if (intent.target === \"artists\") {\n                return await listUniqueArtists(collection, intent.limit || 50);\n            } else {\n                return await listImages(collection, intent.limit || 20);\n            }\n        case \"filter\":\n            return await filterImages(collection, intent.filter, intent.limit || 20);\n        case \"describe\":\n            return await describeCollection(collection);\n        default:\n            throw new Error(`Unknown collection-level query type: ${intent.type}`);\n    }\n}\n// New database-level functions\nasync function countCollections() {\n    const collectionsInfo = await _db__WEBPACK_IMPORTED_MODULE_2__.client.getCollections();\n    const collections = collectionsInfo.collections.map((c)=>c.name);\n    return {\n        count: collections.length,\n        collections: collections\n    };\n}\nasync function listCollections() {\n    const collectionsInfo = await _db__WEBPACK_IMPORTED_MODULE_2__.client.getCollections();\n    const collections = collectionsInfo.collections;\n    // Get detailed info for each collection using actual count\n    const detailedCollections = await Promise.all(collections.map(async (collection)=>{\n        try {\n            // Use the same count method that works for individual queries\n            const countResult = await _db__WEBPACK_IMPORTED_MODULE_2__.client.count(collection.name, {});\n            return {\n                name: collection.name,\n                vectors_count: countResult.count || 0\n            };\n        } catch (error) {\n            console.warn(`Failed to count vectors in collection ${collection.name}:`, error);\n            return {\n                name: collection.name,\n                vectors_count: 0\n            };\n        }\n    }));\n    return {\n        collections: detailedCollections\n    };\n}\nasync function describeDatabaseInfo() {\n    const collectionsData = await listCollections();\n    const totalVectors = collectionsData.collections.reduce((sum, col)=>sum + (col.vectors_count || 0), 0);\n    return {\n        total_collections: collectionsData.collections.length,\n        total_vectors: totalVectors,\n        collections: collectionsData.collections\n    };\n}\nasync function searchAcrossCollections(filter, limit) {\n    const collectionsData = await listCollections();\n    const allResults = [];\n    // Search each collection\n    for (const collection of collectionsData.collections){\n        try {\n            const results = await searchImages(collection.name, filter, limit);\n            if (results.images && results.images.length > 0) {\n                allResults.push({\n                    collection: collection.name,\n                    count: results.count,\n                    images: results.images\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to search collection ${collection.name}:`, error);\n        }\n    }\n    const totalCount = allResults.reduce((sum, result)=>sum + result.count, 0);\n    return {\n        total_count: totalCount,\n        collections_searched: collectionsData.collections.length,\n        results_by_collection: allResults\n    };\n}\n// Existing collection-level functions remain the same\nasync function countTotal(collection) {\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.count(collection, {});\n    return {\n        count: response.count\n    };\n}\nasync function countUniqueArtists(collection) {\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.scroll(collection, {\n        limit: 1000,\n        with_payload: true,\n        with_vector: false\n    });\n    const artists = new Set(response.points.map((point)=>point.payload?.name).filter(Boolean));\n    return {\n        count: artists.size,\n        artists: Array.from(artists).slice(0, 20)\n    };\n}\nasync function searchImages(collection, filter, limit) {\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.scroll(collection, {\n        limit: 1000,\n        with_payload: true,\n        with_vector: false\n    });\n    let filteredPoints = response.points;\n    if (filter) {\n        filteredPoints = response.points.filter((point)=>{\n            return Object.entries(filter).every(([key, value])=>{\n                return point.payload?.[key] === value;\n            });\n        });\n    }\n    const limitedPoints = filteredPoints.slice(0, limit);\n    return {\n        count: limitedPoints.length,\n        images: limitedPoints\n    };\n}\nasync function listUniqueArtists(collection, limit) {\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.scroll(collection, {\n        limit,\n        with_payload: true,\n        with_vector: false\n    });\n    const artists = new Set(response.points.map((point)=>point.payload?.name).filter(Boolean));\n    return {\n        artists: Array.from(artists)\n    };\n}\nasync function listImages(collection, limit) {\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.scroll(collection, {\n        limit,\n        with_payload: true,\n        with_vector: false\n    });\n    return {\n        count: response.points.length,\n        images: response.points.map((point)=>({\n                id: point.id,\n                artist: point.payload?.name,\n                filename: point.payload?.file_name\n            }))\n    };\n}\nasync function filterImages(collection, filter, limit) {\n    return await searchImages(collection, filter, limit);\n}\nasync function describeCollection(collection) {\n    const totalCount = await countTotal(collection);\n    const artistsData = await countUniqueArtists(collection);\n    const sampleImages = await listImages(collection, 5);\n    return {\n        total_images: totalCount.count,\n        unique_artists: artistsData.count,\n        sample_artists: artistsData.artists.slice(0, 10),\n        sample_images: sampleImages.images\n    };\n}\nasync function generateResponse(question, intent, data, provider) {\n    const fallbackResponse = generateFallbackResponse(question, intent, data);\n    if (!process.env.OPENAI_API_KEY && !process.env.GEMINI_API_KEY) {\n        return fallbackResponse;\n    }\n    const systemPrompt = `You are a helpful assistant that explains vector database query results in natural language.\n  \nThe user asked: \"${question}\"\nThe query type was: ${intent.type}\nThe query scope was: ${intent.scope}\nThe data returned is: ${JSON.stringify(data, null, 2)}\n\nProvide a concise, natural language response that directly answers the user's question. Be specific with numbers and names when available.`;\n    try {\n        let response;\n        if (provider === \"gemini\" && process.env.GEMINI_API_KEY) {\n            const model = genAI.getGenerativeModel({\n                model: \"gemini-2.0-flash\"\n            });\n            const result = await model.generateContent(systemPrompt);\n            response = result.response.text();\n        } else if (provider === \"openai\" && process.env.OPENAI_API_KEY) {\n            const completion = await openai.chat.completions.create({\n                model: \"gpt-3.5-turbo\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: systemPrompt\n                    }\n                ],\n                temperature: 0.3,\n                max_tokens: 200\n            });\n            response = completion.choices[0].message.content || fallbackResponse;\n        } else {\n            return fallbackResponse;\n        }\n        return response.trim();\n    } catch (error) {\n        console.warn(\"Failed to generate LLM response, using fallback:\", error);\n        return fallbackResponse;\n    }\n}\nfunction generateFallbackResponse(question, intent, data) {\n    if (intent.scope === \"database\") {\n        switch(intent.type){\n            case \"count\":\n                if (intent.target === \"collections\") {\n                    return `I found ${data.count || 0} collections in the database: ${data.collections?.join(\", \") || \"None found\"}.`;\n                }\n                if (intent.target === \"artists\") {\n                    return `I found ${data.count || 0} unique artists across all collections. Some of them include: ${data.artists?.slice(0, 5).join(\", \") || \"No artists found\"}.`;\n                }\n                if (intent.target === \"total\") {\n                    return `The database contains ${data.count || 0} total vectors across all collections.`;\n                }\n                break;\n            case \"collections\":\n                return `The database contains ${data.collections?.length || 0} collections: ${data.collections?.map((c)=>`${c.name} (${c.vectors_count || 0} vectors)`).join(\", \") || \"None found\"}.`;\n            case \"database\":\n                return `The database contains ${data.total_collections || 0} collections with a total of ${data.total_vectors || 0} vectors.`;\n            case \"search\":\n                return `I searched across ${data.collections_searched || 0} collections and found ${data.total_count || 0} matching items.`;\n            case \"list\":\n                if (intent.target === \"artists\") {\n                    return `I found ${data.artists?.length || 0} unique artists across all collections: ${data.artists?.slice(0, 10).join(\", \") || \"No artists found\"}.`;\n                }\n                break;\n        }\n    }\n    // Collection-level responses (existing logic)\n    switch(intent.type){\n        case \"count\":\n            if (intent.target === \"artists\") {\n                return `I found ${data.count || 0} unique artists in the collection. Some of them include: ${data.artists?.slice(0, 5).join(\", \") || \"No artists found\"}.`;\n            } else {\n                return `The collection contains ${data.count || 0} total images.`;\n            }\n        case \"search\":\n        case \"filter\":\n            return `I found ${data.count || 0} images matching your criteria.`;\n        case \"list\":\n            if (intent.target === \"artists\") {\n                return `Here are the artists in the collection: ${data.artists?.slice(0, 10).join(\", \") || \"No artists found\"}${data.artists?.length > 10 ? \"...\" : \"\"}.`;\n            } else {\n                return `I found ${data.count || 0} items in the collection.`;\n            }\n        case \"describe\":\n            return `This collection contains ${data.total_images || 0} images from ${data.unique_artists || 0} unique artists. Some featured artists include: ${data.sample_artists?.slice(0, 5).join(\", \") || \"No artists found\"}.`;\n        default:\n            return \"I processed your query successfully using pattern matching.\";\n    }\n}\n// New database-level functions for artists and total counts\nasync function countArtistsAcrossDatabase() {\n    const collectionsData = await listCollections();\n    const allArtists = new Set();\n    // Collect artists from each collection\n    for (const collection of collectionsData.collections){\n        try {\n            if (collection.vectors_count && collection.vectors_count > 0) {\n                const artistsData = await countUniqueArtists(collection.name);\n                artistsData.artists.forEach((artist)=>allArtists.add(artist));\n            }\n        } catch (error) {\n            console.warn(`Failed to get artists from collection ${collection.name}:`, error);\n        }\n    }\n    return {\n        count: allArtists.size,\n        artists: Array.from(allArtists).slice(0, 20)\n    };\n}\nasync function countTotalVectorsAcrossDatabase() {\n    const collectionsData = await listCollections();\n    const totalVectors = collectionsData.collections.reduce((sum, col)=>sum + (col.vectors_count || 0), 0);\n    return {\n        count: totalVectors,\n        by_collection: collectionsData.collections.map((col)=>({\n                name: col.name,\n                count: col.vectors_count || 0\n            }))\n    };\n}\nasync function listArtistsAcrossDatabase(limit) {\n    const collectionsData = await listCollections();\n    const allArtists = new Set();\n    const byCollection = [];\n    // Collect artists from each collection\n    for (const collection of collectionsData.collections){\n        try {\n            if (collection.vectors_count && collection.vectors_count > 0) {\n                const artistsData = await listUniqueArtists(collection.name, Math.min(limit, 20));\n                artistsData.artists.forEach((artist)=>allArtists.add(artist));\n                byCollection.push({\n                    collection: collection.name,\n                    artists: artistsData.artists\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to get artists from collection ${collection.name}:`, error);\n        }\n    }\n    return {\n        artists: Array.from(allArtists).slice(0, limit),\n        by_collection: byCollection\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/qdrant/nlp-query.ts\n");

/***/ }),

/***/ "(api)/./pages/api/ask.ts":
/*!**************************!*\
  !*** ./pages/api/ask.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_qdrant_nlp_query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/qdrant/nlp-query */ \"(api)/./lib/qdrant/nlp-query.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_qdrant_nlp_query__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_qdrant_nlp_query__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nasync function handler(req, res) {\n    // Enable CORS\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    res.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS\");\n    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n    if (req.method === \"OPTIONS\") {\n        res.status(200).end();\n        return;\n    }\n    if (req.method !== \"POST\") {\n        res.setHeader(\"Allow\", [\n            \"POST\"\n        ]);\n        res.status(405).json({\n            error: `Method ${req.method} Not Allowed`\n        });\n        return;\n    }\n    try {\n        const { collection , question , provider  } = req.body;\n        if (!question) {\n            res.status(400).json({\n                error: \"Missing required field: question\"\n            });\n            return;\n        }\n        console.log(`Processing natural language query: \"${question}\" for collection: ${collection || \"database-level\"}`);\n        const result = await (0,_lib_qdrant_nlp_query__WEBPACK_IMPORTED_MODULE_0__.processNaturalQuery)(collection || null, question, provider || \"openai\");\n        // Transform the result to match NaturalQueryResponse interface\n        const response = {\n            question,\n            answer: result.answer,\n            query_type: result.query_type,\n            data: result.data,\n            execution_time_ms: result.execution_time_ms\n        };\n        res.status(200).json(response);\n    } catch (error) {\n        console.error(\"Error processing natural language query:\", error);\n        res.status(500).json({\n            error: error instanceof Error ? error.message : \"Internal server error\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvYXNrLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQ2lFO0FBR2xELGVBQWVDLE9BQU8sQ0FDbkNDLEdBQW1CLEVBQ25CQyxHQUE4RCxFQUM5RDtJQUNBLGNBQWM7SUFDZEEsR0FBRyxDQUFDQyxTQUFTLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbERELEdBQUcsQ0FBQ0MsU0FBUyxDQUFDLDhCQUE4QixFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFDcEVELEdBQUcsQ0FBQ0MsU0FBUyxDQUFDLDhCQUE4QixFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBRTlELElBQUlGLEdBQUcsQ0FBQ0csTUFBTSxLQUFLLFNBQVMsRUFBRTtRQUM1QkYsR0FBRyxDQUFDRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLE9BQU87SUFDVCxDQUFDO0lBRUQsSUFBSUwsR0FBRyxDQUFDRyxNQUFNLEtBQUssTUFBTSxFQUFFO1FBQ3pCRixHQUFHLENBQUNDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7WUFBQyxNQUFNO1NBQUMsQ0FBQyxDQUFDO1FBQ2pDRCxHQUFHLENBQUNHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0UsSUFBSSxDQUFDO1lBQUVDLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRVAsR0FBRyxDQUFDRyxNQUFNLENBQUMsWUFBWSxDQUFDO1NBQUUsQ0FBQyxDQUFDO1FBQ3BFLE9BQU87SUFDVCxDQUFDO0lBRUQsSUFBSTtRQUNGLE1BQU0sRUFBRUssVUFBVSxHQUFFQyxRQUFRLEdBQUVDLFFBQVEsR0FBRSxHQUFHVixHQUFHLENBQUNXLElBQUk7UUFFbkQsSUFBSSxDQUFDRixRQUFRLEVBQUU7WUFDYlIsR0FBRyxDQUFDRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNFLElBQUksQ0FBQztnQkFDbkJDLEtBQUssRUFBRSxrQ0FBa0M7YUFDMUMsQ0FBQyxDQUFDO1lBQ0gsT0FBTztRQUNULENBQUM7UUFFREssT0FBTyxDQUFDQyxHQUFHLENBQ1QsQ0FBQyxvQ0FBb0MsRUFBRUosUUFBUSxDQUFDLGtCQUFrQixFQUNoRUQsVUFBVSxJQUFJLGdCQUFnQixDQUMvQixDQUFDLENBQ0gsQ0FBQztRQUVGLE1BQU1NLE1BQU0sR0FBRyxNQUFNaEIsMEVBQW1CLENBQ3RDVSxVQUFVLElBQUksSUFBSSxFQUNsQkMsUUFBUSxFQUNSQyxRQUFRLElBQUksUUFBUSxDQUNyQjtRQUVELCtEQUErRDtRQUMvRCxNQUFNSyxRQUFRLEdBQXlCO1lBQ3JDTixRQUFRO1lBQ1JPLE1BQU0sRUFBRUYsTUFBTSxDQUFDRSxNQUFNO1lBQ3JCQyxVQUFVLEVBQUVILE1BQU0sQ0FBQ0csVUFBVTtZQUM3QkMsSUFBSSxFQUFFSixNQUFNLENBQUNJLElBQUk7WUFDakJDLGlCQUFpQixFQUFFTCxNQUFNLENBQUNLLGlCQUFpQjtTQUM1QztRQUVEbEIsR0FBRyxDQUFDRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNFLElBQUksQ0FBQ1MsUUFBUSxDQUFDLENBQUM7SUFDakMsRUFBRSxPQUFPUixLQUFLLEVBQUU7UUFDZEssT0FBTyxDQUFDTCxLQUFLLENBQUMsMENBQTBDLEVBQUVBLEtBQUssQ0FBQyxDQUFDO1FBQ2pFTixHQUFHLENBQUNHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0UsSUFBSSxDQUFDO1lBQ25CQyxLQUFLLEVBQUVBLEtBQUssWUFBWWEsS0FBSyxHQUFHYixLQUFLLENBQUNjLE9BQU8sR0FBRyx1QkFBdUI7U0FDeEUsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly95ZWFybi8uL3BhZ2VzL2FwaS9hc2sudHM/NjY0MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tIFwibmV4dFwiO1xuaW1wb3J0IHsgcHJvY2Vzc05hdHVyYWxRdWVyeSB9IGZyb20gXCIuLi8uLi9saWIvcWRyYW50L25scC1xdWVyeVwiO1xuaW1wb3J0IHsgTmF0dXJhbFF1ZXJ5UmVxdWVzdCwgTmF0dXJhbFF1ZXJ5UmVzcG9uc2UgfSBmcm9tIFwiLi4vLi4vbGliL3R5cGVzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIoXG4gIHJlcTogTmV4dEFwaVJlcXVlc3QsXG4gIHJlczogTmV4dEFwaVJlc3BvbnNlPE5hdHVyYWxRdWVyeVJlc3BvbnNlIHwgeyBlcnJvcjogc3RyaW5nIH0+XG4pIHtcbiAgLy8gRW5hYmxlIENPUlNcbiAgcmVzLnNldEhlYWRlcihcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiLCBcIipcIik7XG4gIHJlcy5zZXRIZWFkZXIoXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzXCIsIFwiR0VULCBQT1NULCBPUFRJT05TXCIpO1xuICByZXMuc2V0SGVhZGVyKFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVyc1wiLCBcIkNvbnRlbnQtVHlwZVwiKTtcblxuICBpZiAocmVxLm1ldGhvZCA9PT0gXCJPUFRJT05TXCIpIHtcbiAgICByZXMuc3RhdHVzKDIwMCkuZW5kKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHJlcS5tZXRob2QgIT09IFwiUE9TVFwiKSB7XG4gICAgcmVzLnNldEhlYWRlcihcIkFsbG93XCIsIFtcIlBPU1RcIl0pO1xuICAgIHJlcy5zdGF0dXMoNDA1KS5qc29uKHsgZXJyb3I6IGBNZXRob2QgJHtyZXEubWV0aG9kfSBOb3QgQWxsb3dlZGAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb24sIHF1ZXN0aW9uLCBwcm92aWRlciB9ID0gcmVxLmJvZHkgYXMgTmF0dXJhbFF1ZXJ5UmVxdWVzdDtcblxuICAgIGlmICghcXVlc3Rpb24pIHtcbiAgICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6IFwiTWlzc2luZyByZXF1aXJlZCBmaWVsZDogcXVlc3Rpb25cIixcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYFByb2Nlc3NpbmcgbmF0dXJhbCBsYW5ndWFnZSBxdWVyeTogXCIke3F1ZXN0aW9ufVwiIGZvciBjb2xsZWN0aW9uOiAke1xuICAgICAgICBjb2xsZWN0aW9uIHx8IFwiZGF0YWJhc2UtbGV2ZWxcIlxuICAgICAgfWBcbiAgICApO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvY2Vzc05hdHVyYWxRdWVyeShcbiAgICAgIGNvbGxlY3Rpb24gfHwgbnVsbCwgLy8gQWxsb3cgbnVsbCBmb3IgZGF0YWJhc2UtbGV2ZWwgcXVlcmllc1xuICAgICAgcXVlc3Rpb24sXG4gICAgICBwcm92aWRlciB8fCBcIm9wZW5haVwiXG4gICAgKTtcblxuICAgIC8vIFRyYW5zZm9ybSB0aGUgcmVzdWx0IHRvIG1hdGNoIE5hdHVyYWxRdWVyeVJlc3BvbnNlIGludGVyZmFjZVxuICAgIGNvbnN0IHJlc3BvbnNlOiBOYXR1cmFsUXVlcnlSZXNwb25zZSA9IHtcbiAgICAgIHF1ZXN0aW9uLFxuICAgICAgYW5zd2VyOiByZXN1bHQuYW5zd2VyLFxuICAgICAgcXVlcnlfdHlwZTogcmVzdWx0LnF1ZXJ5X3R5cGUsXG4gICAgICBkYXRhOiByZXN1bHQuZGF0YSxcbiAgICAgIGV4ZWN1dGlvbl90aW1lX21zOiByZXN1bHQuZXhlY3V0aW9uX3RpbWVfbXMsXG4gICAgfTtcblxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHJlc3BvbnNlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgcHJvY2Vzc2luZyBuYXR1cmFsIGxhbmd1YWdlIHF1ZXJ5OlwiLCBlcnJvcik7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogXCJJbnRlcm5hbCBzZXJ2ZXIgZXJyb3JcIixcbiAgICB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbInByb2Nlc3NOYXR1cmFsUXVlcnkiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwic2V0SGVhZGVyIiwibWV0aG9kIiwic3RhdHVzIiwiZW5kIiwianNvbiIsImVycm9yIiwiY29sbGVjdGlvbiIsInF1ZXN0aW9uIiwicHJvdmlkZXIiLCJib2R5IiwiY29uc29sZSIsImxvZyIsInJlc3VsdCIsInJlc3BvbnNlIiwiYW5zd2VyIiwicXVlcnlfdHlwZSIsImRhdGEiLCJleGVjdXRpb25fdGltZV9tcyIsIkVycm9yIiwibWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./pages/api/ask.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/ask.ts"));
module.exports = __webpack_exports__;

})();