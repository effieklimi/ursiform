"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/ask";
exports.ids = ["pages/api/ask"];
exports.modules = {

/***/ "@google/generative-ai":
/*!****************************************!*\
  !*** external "@google/generative-ai" ***!
  \****************************************/
/***/ ((module) => {

module.exports = import("@google/generative-ai");;

/***/ }),

/***/ "@qdrant/js-client-rest":
/*!*****************************************!*\
  !*** external "@qdrant/js-client-rest" ***!
  \*****************************************/
/***/ ((module) => {

module.exports = import("@qdrant/js-client-rest");;

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("openai");;

/***/ }),

/***/ "(api)/./lib/qdrant/db.ts":
/*!**************************!*\
  !*** ./lib/qdrant/db.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"client\": () => (/* binding */ client),\n/* harmony export */   \"createCollection\": () => (/* binding */ createCollection),\n/* harmony export */   \"testConnection\": () => (/* binding */ testConnection)\n/* harmony export */ });\n/* harmony import */ var _qdrant_js_client_rest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @qdrant/js-client-rest */ \"@qdrant/js-client-rest\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_qdrant_js_client_rest__WEBPACK_IMPORTED_MODULE_0__]);\n_qdrant_js_client_rest__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// Initialize client with support for both local and cloud instances\nconst qdrantUrl = \"https://1555b3af-2ea7-409c-83a3-3a49207ac217.us-east4-0.gcp.cloud.qdrant.io:6333\" || 0;\nconst qdrantApiKey = process.env.QDRANT_API_KEY;\nlet clientConfig;\n// For cloud instances, use the recommended format from documentation\nif (qdrantApiKey) {\n    // Parse the URL to extract host\n    const url = new URL(qdrantUrl);\n    const host = url.hostname;\n    const isHttps = url.protocol === \"https:\";\n    clientConfig = {\n        host: host,\n        port: null,\n        https: isHttps,\n        apiKey: qdrantApiKey\n    };\n    console.log(`Connecting to Qdrant Cloud at ${host} (HTTPS: ${isHttps})`);\n} else {\n    // For local instances without API key\n    clientConfig = {\n        url: qdrantUrl\n    };\n    console.log(`Connecting to local Qdrant at ${qdrantUrl}`);\n}\nconst client = new _qdrant_js_client_rest__WEBPACK_IMPORTED_MODULE_0__.QdrantClient(clientConfig);\n\n// Test Qdrant connection\nasync function testConnection() {\n    try {\n        // Use getCollections as a simple health check\n        await client.getCollections();\n        console.log(\"Qdrant connection successful\");\n        return true;\n    } catch (error) {\n        console.error(\"Qdrant connection failed:\", error);\n        return false;\n    }\n}\nasync function createCollection(name = \"my_collection\", dimension = 768) {\n    try {\n        // First test the connection\n        const isConnected = await testConnection();\n        if (!isConnected) {\n            throw new Error(\"Cannot connect to Qdrant database. Please check your configuration.\");\n        }\n        // Check if collection already exists\n        try {\n            await client.getCollection(name);\n            console.log(`Collection \"${name}\" already exists`);\n            return;\n        } catch (error) {\n            // Collection doesn't exist, create it\n            console.log(`Collection \"${name}\" does not exist, creating...`);\n            // Check if it's a different error than \"not found\"\n            if (error.status && error.status !== 404) {\n                console.error(\"Unexpected error checking collection:\", error);\n                throw error;\n            }\n        }\n        await client.createCollection(name, {\n            vectors: {\n                size: dimension,\n                distance: \"Cosine\"\n            }\n        });\n        console.log(`Collection \"${name}\" created successfully with dimension ${dimension}`);\n    } catch (error1) {\n        console.error(`Error creating collection \"${name}\":`, error1);\n        // Provide more specific error messages\n        if (error1.message?.includes(\"authentication\") || error1.status === 401 || error1.status === 403) {\n            throw new Error(\"Authentication failed. Please check your QDRANT_API_KEY and QDRANT_URL.\");\n        } else if (error1.message?.includes(\"connection\") || error1.code === \"ECONNREFUSED\") {\n            throw new Error(\"Cannot connect to Qdrant. Please check your QDRANT_URL.\");\n        } else {\n            throw error1;\n        }\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/qdrant/db.ts\n");

/***/ }),

/***/ "(api)/./lib/qdrant/nlp-query.ts":
/*!*********************************!*\
  !*** ./lib/qdrant/nlp-query.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"processNaturalQuery\": () => (/* binding */ processNaturalQuery)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @google/generative-ai */ \"@google/generative-ai\");\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./db */ \"(api)/./lib/qdrant/db.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([openai__WEBPACK_IMPORTED_MODULE_0__, _google_generative_ai__WEBPACK_IMPORTED_MODULE_1__, _db__WEBPACK_IMPORTED_MODULE_2__]);\n([openai__WEBPACK_IMPORTED_MODULE_0__, _google_generative_ai__WEBPACK_IMPORTED_MODULE_1__, _db__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_1__.GoogleGenerativeAI(process.env.GEMINI_API_KEY || \"\");\nasync function processNaturalQuery(collection, question, provider = \"openai\") {\n    const startTime = Date.now();\n    try {\n        // Step 1: Understand the intent using LLM\n        const intent = await parseQueryIntent(question, provider);\n        // Step 2: Execute the appropriate Qdrant operation\n        const result = await executeQuery(collection, intent);\n        // Step 3: Generate natural language response\n        const answer = await generateResponse(question, intent, result, provider);\n        const execution_time_ms = Date.now() - startTime;\n        return {\n            answer,\n            query_type: intent.type,\n            data: result,\n            execution_time_ms\n        };\n    } catch (error) {\n        console.error(\"Error processing natural query:\", error);\n        throw new Error(\"Failed to process natural language query\");\n    }\n}\nasync function parseQueryIntent(question, provider) {\n    // First try simple pattern matching as fallback\n    const fallbackIntent = inferIntentFromQuestion(question);\n    // If we don't have API keys, use fallback\n    if (!process.env.OPENAI_API_KEY && !process.env.GEMINI_API_KEY) {\n        console.log(\"No API keys available, using pattern matching fallback\");\n        return fallbackIntent;\n    }\n    const systemPrompt = `You are a query analyzer for a vector database. Parse the user's question and return a JSON object with the query intent.\n\nThe database contains image data with these fields:\n- name (artist name)\n- file_name (image filename)\n- image_url (URL to image)\n- url (style URL)\n\nAvailable query types:\n- \"count\": count items (e.g., \"how many artists\", \"count images\")\n- \"search\": find specific items (e.g., \"find Chris Dyer images\")\n- \"list\": list unique values (e.g., \"list all artists\")\n- \"filter\": filter by criteria (e.g., \"images with .jpeg extension\")\n- \"describe\": get general info (e.g., \"describe this collection\")\n\nReturn ONLY a JSON object in this format:\n{\n  \"type\": \"count|search|list|filter|describe\",\n  \"target\": \"what to count/search/list (e.g., 'artists', 'images', 'total')\",\n  \"filter\": {\"field\": \"value\"} or null,\n  \"limit\": number or null\n}\n\nExamples:\n- \"How many artists?\" → {\"type\": \"count\", \"target\": \"artists\", \"filter\": null, \"limit\": null}\n- \"Find Chris Dyer images\" → {\"type\": \"search\", \"target\": \"images\", \"filter\": {\"name\": \"Chris Dyer\"}, \"limit\": 10}\n- \"List all artists\" → {\"type\": \"list\", \"target\": \"artists\", \"filter\": null, \"limit\": null}`;\n    try {\n        let response;\n        if (provider === \"gemini\" && process.env.GEMINI_API_KEY) {\n            const model = genAI.getGenerativeModel({\n                model: \"gemini-pro\"\n            });\n            const result = await model.generateContent([\n                {\n                    text: systemPrompt\n                },\n                {\n                    text: `Question: \"${question}\"`\n                }, \n            ]);\n            response = result.response.text();\n        } else if (provider === \"openai\" && process.env.OPENAI_API_KEY) {\n            const completion = await openai.chat.completions.create({\n                model: \"gpt-3.5-turbo\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: systemPrompt\n                    },\n                    {\n                        role: \"user\",\n                        content: `Question: \"${question}\"`\n                    }, \n                ],\n                temperature: 0\n            });\n            response = completion.choices[0].message.content || \"{}\";\n        } else {\n            throw new Error(\"No valid API key for the specified provider\");\n        }\n        // Extract JSON from response (in case there's extra text)\n        const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n        const jsonStr = jsonMatch ? jsonMatch[0] : response;\n        return JSON.parse(jsonStr);\n    } catch (e) {\n        // Fallback parsing\n        console.warn(\"Failed to parse LLM response, using fallback:\", e);\n        return fallbackIntent;\n    }\n}\nfunction inferIntentFromQuestion(question) {\n    const q = question.toLowerCase();\n    if (q.includes(\"how many\") || q.includes(\"count\")) {\n        if (q.includes(\"artist\")) return {\n            type: \"count\",\n            target: \"artists\"\n        };\n        return {\n            type: \"count\",\n            target: \"total\"\n        };\n    }\n    if (q.includes(\"find\") || q.includes(\"search\")) {\n        // Try to extract artist name\n        const artistMatch = question.match(/(?:by|from|of)\\s+([A-Z][a-z]+\\s+[A-Z][a-z]+)/i);\n        if (artistMatch) {\n            return {\n                type: \"search\",\n                target: \"images\",\n                filter: {\n                    name: artistMatch[1]\n                },\n                limit: 10\n            };\n        }\n        return {\n            type: \"search\",\n            target: \"images\",\n            limit: 10\n        };\n    }\n    if (q.includes(\"list\") || q.includes(\"show\")) {\n        if (q.includes(\"artist\")) return {\n            type: \"list\",\n            target: \"artists\"\n        };\n        return {\n            type: \"list\",\n            target: \"images\",\n            limit: 20\n        };\n    }\n    return {\n        type: \"describe\",\n        target: \"collection\"\n    };\n}\nasync function executeQuery(collection, intent) {\n    switch(intent.type){\n        case \"count\":\n            if (intent.target === \"artists\") {\n                return await countUniqueArtists(collection);\n            } else {\n                return await countTotal(collection);\n            }\n        case \"search\":\n            return await searchImages(collection, intent.filter, intent.limit || 10);\n        case \"list\":\n            if (intent.target === \"artists\") {\n                return await listUniqueArtists(collection, intent.limit || 50);\n            } else {\n                return await listImages(collection, intent.limit || 20);\n            }\n        case \"filter\":\n            return await filterImages(collection, intent.filter, intent.limit || 20);\n        case \"describe\":\n            return await describeCollection(collection);\n        default:\n            throw new Error(`Unknown query type: ${intent.type}`);\n    }\n}\nasync function countTotal(collection) {\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.count(collection, {});\n    return {\n        count: response.count\n    };\n}\nasync function countUniqueArtists(collection) {\n    // Get sample of images to count unique artists\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.scroll(collection, {\n        limit: 1000,\n        with_payload: true,\n        with_vector: false\n    });\n    const artists = new Set(response.points.map((point)=>point.payload?.name).filter(Boolean));\n    return {\n        count: artists.size,\n        artists: Array.from(artists).slice(0, 20)\n    };\n}\nasync function searchImages(collection, filter, limit) {\n    // For now, let's get all images and filter in memory to avoid index requirements\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.scroll(collection, {\n        limit: 1000,\n        with_payload: true,\n        with_vector: false\n    });\n    let filteredPoints = response.points;\n    // Apply filters in memory if provided\n    if (filter) {\n        filteredPoints = response.points.filter((point)=>{\n            return Object.entries(filter).every(([key, value])=>{\n                return point.payload?.[key] === value;\n            });\n        });\n    }\n    // Limit results\n    const limitedPoints = filteredPoints.slice(0, limit);\n    return {\n        count: limitedPoints.length,\n        images: limitedPoints\n    };\n}\nasync function listUniqueArtists(collection, limit) {\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.scroll(collection, {\n        limit,\n        with_payload: true,\n        with_vector: false\n    });\n    const artists = new Set(response.points.map((point)=>point.payload?.name).filter(Boolean));\n    return {\n        artists: Array.from(artists)\n    };\n}\nasync function listImages(collection, limit) {\n    const response = await _db__WEBPACK_IMPORTED_MODULE_2__.client.scroll(collection, {\n        limit,\n        with_payload: true,\n        with_vector: false\n    });\n    return {\n        count: response.points.length,\n        images: response.points.map((point)=>({\n                id: point.id,\n                artist: point.payload?.name,\n                filename: point.payload?.file_name\n            }))\n    };\n}\nasync function filterImages(collection, filter, limit) {\n    return await searchImages(collection, filter, limit);\n}\nasync function describeCollection(collection) {\n    const totalCount = await countTotal(collection);\n    const artistsData = await countUniqueArtists(collection);\n    const sampleImages = await listImages(collection, 5);\n    return {\n        total_images: totalCount.count,\n        unique_artists: artistsData.count,\n        sample_artists: artistsData.artists.slice(0, 10),\n        sample_images: sampleImages.images\n    };\n}\nasync function generateResponse(question, intent, data, provider) {\n    // Simple fallback responses\n    const fallbackResponse = generateFallbackResponse(question, intent, data);\n    // If no API keys, use fallback\n    if (!process.env.OPENAI_API_KEY && !process.env.GEMINI_API_KEY) {\n        return fallbackResponse;\n    }\n    const systemPrompt = `You are a helpful assistant that explains database query results in natural language.\n  \nThe user asked: \"${question}\"\nThe query type was: ${intent.type}\nThe data returned is: ${JSON.stringify(data, null, 2)}\n\nProvide a concise, natural language response that directly answers the user's question. Be specific with numbers and names when available.`;\n    try {\n        let response;\n        if (provider === \"gemini\" && process.env.GEMINI_API_KEY) {\n            const model = genAI.getGenerativeModel({\n                model: \"gemini-pro\"\n            });\n            const result = await model.generateContent(systemPrompt);\n            response = result.response.text();\n        } else if (provider === \"openai\" && process.env.OPENAI_API_KEY) {\n            const completion = await openai.chat.completions.create({\n                model: \"gpt-3.5-turbo\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: systemPrompt\n                    }\n                ],\n                temperature: 0.3,\n                max_tokens: 200\n            });\n            response = completion.choices[0].message.content || fallbackResponse;\n        } else {\n            return fallbackResponse;\n        }\n        return response.trim();\n    } catch (error) {\n        console.warn(\"Failed to generate LLM response, using fallback:\", error);\n        return fallbackResponse;\n    }\n}\nfunction generateFallbackResponse(question, intent, data) {\n    switch(intent.type){\n        case \"count\":\n            if (intent.target === \"artists\") {\n                return `I found ${data.count} unique artists in the collection. Some of them include: ${data.artists?.slice(0, 5).join(\", \")}.`;\n            } else {\n                return `The collection contains ${data.count} total images.`;\n            }\n        case \"search\":\n        case \"filter\":\n            return `I found ${data.count} images matching your criteria.`;\n        case \"list\":\n            if (intent.target === \"artists\") {\n                return `Here are the artists in the collection: ${data.artists?.slice(0, 10).join(\", \")}${data.artists?.length > 10 ? \"...\" : \"\"}.`;\n            } else {\n                return `I found ${data.count} items in the collection.`;\n            }\n        case \"describe\":\n            return `This collection contains ${data.total_images} images from ${data.unique_artists} unique artists. Some featured artists include: ${data.sample_artists?.slice(0, 5).join(\", \")}.`;\n        default:\n            return \"I processed your query successfully.\";\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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c291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9wZW5BSSBmcm9tIFwib3BlbmFpXCI7XG5pbXBvcnQgeyBHb29nbGVHZW5lcmF0aXZlQUkgfSBmcm9tIFwiQGdvb2dsZS9nZW5lcmF0aXZlLWFpXCI7XG5pbXBvcnQgeyBjbGllbnQgfSBmcm9tIFwiLi9kYlwiO1xuaW1wb3J0IHsgRW1iZWRkaW5nUHJvdmlkZXIgfSBmcm9tIFwiLi4vc2NoZW1hc1wiO1xuXG5jb25zdCBvcGVuYWkgPSBuZXcgT3BlbkFJKHtcbiAgYXBpS2V5OiBwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSxcbn0pO1xuXG5jb25zdCBnZW5BSSA9IG5ldyBHb29nbGVHZW5lcmF0aXZlQUkocHJvY2Vzcy5lbnYuR0VNSU5JX0FQSV9LRVkgfHwgXCJcIik7XG5cbmludGVyZmFjZSBRdWVyeUludGVudCB7XG4gIHR5cGU6IFwiY291bnRcIiB8IFwic2VhcmNoXCIgfCBcImxpc3RcIiB8IFwiZmlsdGVyXCIgfCBcImRlc2NyaWJlXCI7XG4gIHRhcmdldDogc3RyaW5nOyAvLyB3aGF0IHRvIGNvdW50L3NlYXJjaC9saXN0XG4gIGZpbHRlcj86IGFueTsgLy8gYW55IGZpbHRlcnMgdG8gYXBwbHlcbiAgbGltaXQ/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcm9jZXNzTmF0dXJhbFF1ZXJ5KFxuICBjb2xsZWN0aW9uOiBzdHJpbmcsXG4gIHF1ZXN0aW9uOiBzdHJpbmcsXG4gIHByb3ZpZGVyOiBFbWJlZGRpbmdQcm92aWRlciA9IFwib3BlbmFpXCJcbik6IFByb21pc2U8e1xuICBhbnN3ZXI6IHN0cmluZztcbiAgcXVlcnlfdHlwZTogc3RyaW5nO1xuICBkYXRhPzogYW55O1xuICBleGVjdXRpb25fdGltZV9tczogbnVtYmVyO1xufT4ge1xuICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuXG4gIHRyeSB7XG4gICAgLy8gU3RlcCAxOiBVbmRlcnN0YW5kIHRoZSBpbnRlbnQgdXNpbmcgTExNXG4gICAgY29uc3QgaW50ZW50ID0gYXdhaXQgcGFyc2VRdWVyeUludGVudChxdWVzdGlvbiwgcHJvdmlkZXIpO1xuXG4gICAgLy8gU3RlcCAyOiBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBRZHJhbnQgb3BlcmF0aW9uXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZXhlY3V0ZVF1ZXJ5KGNvbGxlY3Rpb24sIGludGVudCk7XG5cbiAgICAvLyBTdGVwIDM6IEdlbmVyYXRlIG5hdHVyYWwgbGFuZ3VhZ2UgcmVzcG9uc2VcbiAgICBjb25zdCBhbnN3ZXIgPSBhd2FpdCBnZW5lcmF0ZVJlc3BvbnNlKHF1ZXN0aW9uLCBpbnRlbnQsIHJlc3VsdCwgcHJvdmlkZXIpO1xuXG4gICAgY29uc3QgZXhlY3V0aW9uX3RpbWVfbXMgPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGFuc3dlcixcbiAgICAgIHF1ZXJ5X3R5cGU6IGludGVudC50eXBlLFxuICAgICAgZGF0YTogcmVzdWx0LFxuICAgICAgZXhlY3V0aW9uX3RpbWVfbXMsXG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgcHJvY2Vzc2luZyBuYXR1cmFsIHF1ZXJ5OlwiLCBlcnJvcik7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHByb2Nlc3MgbmF0dXJhbCBsYW5ndWFnZSBxdWVyeVwiKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBwYXJzZVF1ZXJ5SW50ZW50KFxuICBxdWVzdGlvbjogc3RyaW5nLFxuICBwcm92aWRlcjogRW1iZWRkaW5nUHJvdmlkZXJcbik6IFByb21pc2U8UXVlcnlJbnRlbnQ+IHtcbiAgLy8gRmlyc3QgdHJ5IHNpbXBsZSBwYXR0ZXJuIG1hdGNoaW5nIGFzIGZhbGxiYWNrXG4gIGNvbnN0IGZhbGxiYWNrSW50ZW50ID0gaW5mZXJJbnRlbnRGcm9tUXVlc3Rpb24ocXVlc3Rpb24pO1xuXG4gIC8vIElmIHdlIGRvbid0IGhhdmUgQVBJIGtleXMsIHVzZSBmYWxsYmFja1xuICBpZiAoIXByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZICYmICFwcm9jZXNzLmVudi5HRU1JTklfQVBJX0tFWSkge1xuICAgIGNvbnNvbGUubG9nKFwiTm8gQVBJIGtleXMgYXZhaWxhYmxlLCB1c2luZyBwYXR0ZXJuIG1hdGNoaW5nIGZhbGxiYWNrXCIpO1xuICAgIHJldHVybiBmYWxsYmFja0ludGVudDtcbiAgfVxuXG4gIGNvbnN0IHN5c3RlbVByb21wdCA9IGBZb3UgYXJlIGEgcXVlcnkgYW5hbHl6ZXIgZm9yIGEgdmVjdG9yIGRhdGFiYXNlLiBQYXJzZSB0aGUgdXNlcidzIHF1ZXN0aW9uIGFuZCByZXR1cm4gYSBKU09OIG9iamVjdCB3aXRoIHRoZSBxdWVyeSBpbnRlbnQuXG5cblRoZSBkYXRhYmFzZSBjb250YWlucyBpbWFnZSBkYXRhIHdpdGggdGhlc2UgZmllbGRzOlxuLSBuYW1lIChhcnRpc3QgbmFtZSlcbi0gZmlsZV9uYW1lIChpbWFnZSBmaWxlbmFtZSlcbi0gaW1hZ2VfdXJsIChVUkwgdG8gaW1hZ2UpXG4tIHVybCAoc3R5bGUgVVJMKVxuXG5BdmFpbGFibGUgcXVlcnkgdHlwZXM6XG4tIFwiY291bnRcIjogY291bnQgaXRlbXMgKGUuZy4sIFwiaG93IG1hbnkgYXJ0aXN0c1wiLCBcImNvdW50IGltYWdlc1wiKVxuLSBcInNlYXJjaFwiOiBmaW5kIHNwZWNpZmljIGl0ZW1zIChlLmcuLCBcImZpbmQgQ2hyaXMgRHllciBpbWFnZXNcIilcbi0gXCJsaXN0XCI6IGxpc3QgdW5pcXVlIHZhbHVlcyAoZS5nLiwgXCJsaXN0IGFsbCBhcnRpc3RzXCIpXG4tIFwiZmlsdGVyXCI6IGZpbHRlciBieSBjcml0ZXJpYSAoZS5nLiwgXCJpbWFnZXMgd2l0aCAuanBlZyBleHRlbnNpb25cIilcbi0gXCJkZXNjcmliZVwiOiBnZXQgZ2VuZXJhbCBpbmZvIChlLmcuLCBcImRlc2NyaWJlIHRoaXMgY29sbGVjdGlvblwiKVxuXG5SZXR1cm4gT05MWSBhIEpTT04gb2JqZWN0IGluIHRoaXMgZm9ybWF0Olxue1xuICBcInR5cGVcIjogXCJjb3VudHxzZWFyY2h8bGlzdHxmaWx0ZXJ8ZGVzY3JpYmVcIixcbiAgXCJ0YXJnZXRcIjogXCJ3aGF0IHRvIGNvdW50L3NlYXJjaC9saXN0IChlLmcuLCAnYXJ0aXN0cycsICdpbWFnZXMnLCAndG90YWwnKVwiLFxuICBcImZpbHRlclwiOiB7XCJmaWVsZFwiOiBcInZhbHVlXCJ9IG9yIG51bGwsXG4gIFwibGltaXRcIjogbnVtYmVyIG9yIG51bGxcbn1cblxuRXhhbXBsZXM6XG4tIFwiSG93IG1hbnkgYXJ0aXN0cz9cIiDihpIge1widHlwZVwiOiBcImNvdW50XCIsIFwidGFyZ2V0XCI6IFwiYXJ0aXN0c1wiLCBcImZpbHRlclwiOiBudWxsLCBcImxpbWl0XCI6IG51bGx9XG4tIFwiRmluZCBDaHJpcyBEeWVyIGltYWdlc1wiIOKGkiB7XCJ0eXBlXCI6IFwic2VhcmNoXCIsIFwidGFyZ2V0XCI6IFwiaW1hZ2VzXCIsIFwiZmlsdGVyXCI6IHtcIm5hbWVcIjogXCJDaHJpcyBEeWVyXCJ9LCBcImxpbWl0XCI6IDEwfVxuLSBcIkxpc3QgYWxsIGFydGlzdHNcIiDihpIge1widHlwZVwiOiBcImxpc3RcIiwgXCJ0YXJnZXRcIjogXCJhcnRpc3RzXCIsIFwiZmlsdGVyXCI6IG51bGwsIFwibGltaXRcIjogbnVsbH1gO1xuXG4gIHRyeSB7XG4gICAgbGV0IHJlc3BvbnNlOiBzdHJpbmc7XG5cbiAgICBpZiAocHJvdmlkZXIgPT09IFwiZ2VtaW5pXCIgJiYgcHJvY2Vzcy5lbnYuR0VNSU5JX0FQSV9LRVkpIHtcbiAgICAgIGNvbnN0IG1vZGVsID0gZ2VuQUkuZ2V0R2VuZXJhdGl2ZU1vZGVsKHsgbW9kZWw6IFwiZ2VtaW5pLXByb1wiIH0pO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbW9kZWwuZ2VuZXJhdGVDb250ZW50KFtcbiAgICAgICAgeyB0ZXh0OiBzeXN0ZW1Qcm9tcHQgfSxcbiAgICAgICAgeyB0ZXh0OiBgUXVlc3Rpb246IFwiJHtxdWVzdGlvbn1cImAgfSxcbiAgICAgIF0pO1xuICAgICAgcmVzcG9uc2UgPSByZXN1bHQucmVzcG9uc2UudGV4dCgpO1xuICAgIH0gZWxzZSBpZiAocHJvdmlkZXIgPT09IFwib3BlbmFpXCIgJiYgcHJvY2Vzcy5lbnYuT1BFTkFJX0FQSV9LRVkpIHtcbiAgICAgIGNvbnN0IGNvbXBsZXRpb24gPSBhd2FpdCBvcGVuYWkuY2hhdC5jb21wbGV0aW9ucy5jcmVhdGUoe1xuICAgICAgICBtb2RlbDogXCJncHQtMy41LXR1cmJvXCIsXG4gICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgeyByb2xlOiBcInN5c3RlbVwiLCBjb250ZW50OiBzeXN0ZW1Qcm9tcHQgfSxcbiAgICAgICAgICB7IHJvbGU6IFwidXNlclwiLCBjb250ZW50OiBgUXVlc3Rpb246IFwiJHtxdWVzdGlvbn1cImAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgdGVtcGVyYXR1cmU6IDAsXG4gICAgICB9KTtcbiAgICAgIHJlc3BvbnNlID0gY29tcGxldGlvbi5jaG9pY2VzWzBdLm1lc3NhZ2UuY29udGVudCB8fCBcInt9XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHZhbGlkIEFQSSBrZXkgZm9yIHRoZSBzcGVjaWZpZWQgcHJvdmlkZXJcIik7XG4gICAgfVxuXG4gICAgLy8gRXh0cmFjdCBKU09OIGZyb20gcmVzcG9uc2UgKGluIGNhc2UgdGhlcmUncyBleHRyYSB0ZXh0KVxuICAgIGNvbnN0IGpzb25NYXRjaCA9IHJlc3BvbnNlLm1hdGNoKC9cXHtbXFxzXFxTXSpcXH0vKTtcbiAgICBjb25zdCBqc29uU3RyID0ganNvbk1hdGNoID8ganNvbk1hdGNoWzBdIDogcmVzcG9uc2U7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoanNvblN0cik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBGYWxsYmFjayBwYXJzaW5nXG4gICAgY29uc29sZS53YXJuKFwiRmFpbGVkIHRvIHBhcnNlIExMTSByZXNwb25zZSwgdXNpbmcgZmFsbGJhY2s6XCIsIGUpO1xuICAgIHJldHVybiBmYWxsYmFja0ludGVudDtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmZlckludGVudEZyb21RdWVzdGlvbihxdWVzdGlvbjogc3RyaW5nKTogUXVlcnlJbnRlbnQge1xuICBjb25zdCBxID0gcXVlc3Rpb24udG9Mb3dlckNhc2UoKTtcblxuICBpZiAocS5pbmNsdWRlcyhcImhvdyBtYW55XCIpIHx8IHEuaW5jbHVkZXMoXCJjb3VudFwiKSkge1xuICAgIGlmIChxLmluY2x1ZGVzKFwiYXJ0aXN0XCIpKSByZXR1cm4geyB0eXBlOiBcImNvdW50XCIsIHRhcmdldDogXCJhcnRpc3RzXCIgfTtcbiAgICByZXR1cm4geyB0eXBlOiBcImNvdW50XCIsIHRhcmdldDogXCJ0b3RhbFwiIH07XG4gIH1cblxuICBpZiAocS5pbmNsdWRlcyhcImZpbmRcIikgfHwgcS5pbmNsdWRlcyhcInNlYXJjaFwiKSkge1xuICAgIC8vIFRyeSB0byBleHRyYWN0IGFydGlzdCBuYW1lXG4gICAgY29uc3QgYXJ0aXN0TWF0Y2ggPSBxdWVzdGlvbi5tYXRjaChcbiAgICAgIC8oPzpieXxmcm9tfG9mKVxccysoW0EtWl1bYS16XStcXHMrW0EtWl1bYS16XSspL2lcbiAgICApO1xuICAgIGlmIChhcnRpc3RNYXRjaCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJzZWFyY2hcIixcbiAgICAgICAgdGFyZ2V0OiBcImltYWdlc1wiLFxuICAgICAgICBmaWx0ZXI6IHsgbmFtZTogYXJ0aXN0TWF0Y2hbMV0gfSxcbiAgICAgICAgbGltaXQ6IDEwLFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdHlwZTogXCJzZWFyY2hcIiwgdGFyZ2V0OiBcImltYWdlc1wiLCBsaW1pdDogMTAgfTtcbiAgfVxuXG4gIGlmIChxLmluY2x1ZGVzKFwibGlzdFwiKSB8fCBxLmluY2x1ZGVzKFwic2hvd1wiKSkge1xuICAgIGlmIChxLmluY2x1ZGVzKFwiYXJ0aXN0XCIpKSByZXR1cm4geyB0eXBlOiBcImxpc3RcIiwgdGFyZ2V0OiBcImFydGlzdHNcIiB9O1xuICAgIHJldHVybiB7IHR5cGU6IFwibGlzdFwiLCB0YXJnZXQ6IFwiaW1hZ2VzXCIsIGxpbWl0OiAyMCB9O1xuICB9XG5cbiAgcmV0dXJuIHsgdHlwZTogXCJkZXNjcmliZVwiLCB0YXJnZXQ6IFwiY29sbGVjdGlvblwiIH07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVRdWVyeShcbiAgY29sbGVjdGlvbjogc3RyaW5nLFxuICBpbnRlbnQ6IFF1ZXJ5SW50ZW50XG4pOiBQcm9taXNlPGFueT4ge1xuICBzd2l0Y2ggKGludGVudC50eXBlKSB7XG4gICAgY2FzZSBcImNvdW50XCI6XG4gICAgICBpZiAoaW50ZW50LnRhcmdldCA9PT0gXCJhcnRpc3RzXCIpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGNvdW50VW5pcXVlQXJ0aXN0cyhjb2xsZWN0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBjb3VudFRvdGFsKGNvbGxlY3Rpb24pO1xuICAgICAgfVxuXG4gICAgY2FzZSBcInNlYXJjaFwiOlxuICAgICAgcmV0dXJuIGF3YWl0IHNlYXJjaEltYWdlcyhjb2xsZWN0aW9uLCBpbnRlbnQuZmlsdGVyLCBpbnRlbnQubGltaXQgfHwgMTApO1xuXG4gICAgY2FzZSBcImxpc3RcIjpcbiAgICAgIGlmIChpbnRlbnQudGFyZ2V0ID09PSBcImFydGlzdHNcIikge1xuICAgICAgICByZXR1cm4gYXdhaXQgbGlzdFVuaXF1ZUFydGlzdHMoY29sbGVjdGlvbiwgaW50ZW50LmxpbWl0IHx8IDUwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBsaXN0SW1hZ2VzKGNvbGxlY3Rpb24sIGludGVudC5saW1pdCB8fCAyMCk7XG4gICAgICB9XG5cbiAgICBjYXNlIFwiZmlsdGVyXCI6XG4gICAgICByZXR1cm4gYXdhaXQgZmlsdGVySW1hZ2VzKGNvbGxlY3Rpb24sIGludGVudC5maWx0ZXIsIGludGVudC5saW1pdCB8fCAyMCk7XG5cbiAgICBjYXNlIFwiZGVzY3JpYmVcIjpcbiAgICAgIHJldHVybiBhd2FpdCBkZXNjcmliZUNvbGxlY3Rpb24oY29sbGVjdGlvbik7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHF1ZXJ5IHR5cGU6ICR7aW50ZW50LnR5cGV9YCk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gY291bnRUb3RhbChjb2xsZWN0aW9uOiBzdHJpbmcpOiBQcm9taXNlPHsgY291bnQ6IG51bWJlciB9PiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LmNvdW50KGNvbGxlY3Rpb24sIHt9KTtcbiAgcmV0dXJuIHsgY291bnQ6IHJlc3BvbnNlLmNvdW50IH07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNvdW50VW5pcXVlQXJ0aXN0cyhcbiAgY29sbGVjdGlvbjogc3RyaW5nXG4pOiBQcm9taXNlPHsgY291bnQ6IG51bWJlcjsgYXJ0aXN0czogc3RyaW5nW10gfT4ge1xuICAvLyBHZXQgc2FtcGxlIG9mIGltYWdlcyB0byBjb3VudCB1bmlxdWUgYXJ0aXN0c1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5zY3JvbGwoY29sbGVjdGlvbiwge1xuICAgIGxpbWl0OiAxMDAwLCAvLyBBZGp1c3QgYmFzZWQgb24gY29sbGVjdGlvbiBzaXplXG4gICAgd2l0aF9wYXlsb2FkOiB0cnVlLFxuICAgIHdpdGhfdmVjdG9yOiBmYWxzZSxcbiAgfSk7XG5cbiAgY29uc3QgYXJ0aXN0cyA9IG5ldyBTZXQoXG4gICAgcmVzcG9uc2UucG9pbnRzLm1hcCgocG9pbnQ6IGFueSkgPT4gcG9pbnQucGF5bG9hZD8ubmFtZSkuZmlsdGVyKEJvb2xlYW4pXG4gICk7XG5cbiAgcmV0dXJuIHtcbiAgICBjb3VudDogYXJ0aXN0cy5zaXplLFxuICAgIGFydGlzdHM6IEFycmF5LmZyb20oYXJ0aXN0cykuc2xpY2UoMCwgMjApLCAvLyBTaG93IGZpcnN0IDIwXG4gIH07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNlYXJjaEltYWdlcyhcbiAgY29sbGVjdGlvbjogc3RyaW5nLFxuICBmaWx0ZXI6IGFueSxcbiAgbGltaXQ6IG51bWJlclxuKTogUHJvbWlzZTxhbnk+IHtcbiAgLy8gRm9yIG5vdywgbGV0J3MgZ2V0IGFsbCBpbWFnZXMgYW5kIGZpbHRlciBpbiBtZW1vcnkgdG8gYXZvaWQgaW5kZXggcmVxdWlyZW1lbnRzXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LnNjcm9sbChjb2xsZWN0aW9uLCB7XG4gICAgbGltaXQ6IDEwMDAsIC8vIEdldCBtb3JlIHRvIGZpbHRlciBmcm9tXG4gICAgd2l0aF9wYXlsb2FkOiB0cnVlLFxuICAgIHdpdGhfdmVjdG9yOiBmYWxzZSxcbiAgfSk7XG5cbiAgbGV0IGZpbHRlcmVkUG9pbnRzID0gcmVzcG9uc2UucG9pbnRzO1xuXG4gIC8vIEFwcGx5IGZpbHRlcnMgaW4gbWVtb3J5IGlmIHByb3ZpZGVkXG4gIGlmIChmaWx0ZXIpIHtcbiAgICBmaWx0ZXJlZFBvaW50cyA9IHJlc3BvbnNlLnBvaW50cy5maWx0ZXIoKHBvaW50OiBhbnkpID0+IHtcbiAgICAgIHJldHVybiBPYmplY3QuZW50cmllcyhmaWx0ZXIpLmV2ZXJ5KChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgcmV0dXJuIHBvaW50LnBheWxvYWQ/LltrZXldID09PSB2YWx1ZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gTGltaXQgcmVzdWx0c1xuICBjb25zdCBsaW1pdGVkUG9pbnRzID0gZmlsdGVyZWRQb2ludHMuc2xpY2UoMCwgbGltaXQpO1xuXG4gIHJldHVybiB7XG4gICAgY291bnQ6IGxpbWl0ZWRQb2ludHMubGVuZ3RoLFxuICAgIGltYWdlczogbGltaXRlZFBvaW50cyxcbiAgfTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbGlzdFVuaXF1ZUFydGlzdHMoXG4gIGNvbGxlY3Rpb246IHN0cmluZyxcbiAgbGltaXQ6IG51bWJlclxuKTogUHJvbWlzZTx7IGFydGlzdHM6IHN0cmluZ1tdIH0+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuc2Nyb2xsKGNvbGxlY3Rpb24sIHtcbiAgICBsaW1pdCxcbiAgICB3aXRoX3BheWxvYWQ6IHRydWUsXG4gICAgd2l0aF92ZWN0b3I6IGZhbHNlLFxuICB9KTtcblxuICBjb25zdCBhcnRpc3RzID0gbmV3IFNldChcbiAgICByZXNwb25zZS5wb2ludHMubWFwKChwb2ludDogYW55KSA9PiBwb2ludC5wYXlsb2FkPy5uYW1lKS5maWx0ZXIoQm9vbGVhbilcbiAgKTtcblxuICByZXR1cm4geyBhcnRpc3RzOiBBcnJheS5mcm9tKGFydGlzdHMpIH07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxpc3RJbWFnZXMoY29sbGVjdGlvbjogc3RyaW5nLCBsaW1pdDogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuc2Nyb2xsKGNvbGxlY3Rpb24sIHtcbiAgICBsaW1pdCxcbiAgICB3aXRoX3BheWxvYWQ6IHRydWUsXG4gICAgd2l0aF92ZWN0b3I6IGZhbHNlLFxuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGNvdW50OiByZXNwb25zZS5wb2ludHMubGVuZ3RoLFxuICAgIGltYWdlczogcmVzcG9uc2UucG9pbnRzLm1hcCgocG9pbnQ6IGFueSkgPT4gKHtcbiAgICAgIGlkOiBwb2ludC5pZCxcbiAgICAgIGFydGlzdDogcG9pbnQucGF5bG9hZD8ubmFtZSxcbiAgICAgIGZpbGVuYW1lOiBwb2ludC5wYXlsb2FkPy5maWxlX25hbWUsXG4gICAgfSkpLFxuICB9O1xufVxuXG5hc3luYyBmdW5jdGlvbiBmaWx0ZXJJbWFnZXMoXG4gIGNvbGxlY3Rpb246IHN0cmluZyxcbiAgZmlsdGVyOiBhbnksXG4gIGxpbWl0OiBudW1iZXJcbik6IFByb21pc2U8YW55PiB7XG4gIHJldHVybiBhd2FpdCBzZWFyY2hJbWFnZXMoY29sbGVjdGlvbiwgZmlsdGVyLCBsaW1pdCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRlc2NyaWJlQ29sbGVjdGlvbihjb2xsZWN0aW9uOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICBjb25zdCB0b3RhbENvdW50ID0gYXdhaXQgY291bnRUb3RhbChjb2xsZWN0aW9uKTtcbiAgY29uc3QgYXJ0aXN0c0RhdGEgPSBhd2FpdCBjb3VudFVuaXF1ZUFydGlzdHMoY29sbGVjdGlvbik7XG4gIGNvbnN0IHNhbXBsZUltYWdlcyA9IGF3YWl0IGxpc3RJbWFnZXMoY29sbGVjdGlvbiwgNSk7XG5cbiAgcmV0dXJuIHtcbiAgICB0b3RhbF9pbWFnZXM6IHRvdGFsQ291bnQuY291bnQsXG4gICAgdW5pcXVlX2FydGlzdHM6IGFydGlzdHNEYXRhLmNvdW50LFxuICAgIHNhbXBsZV9hcnRpc3RzOiBhcnRpc3RzRGF0YS5hcnRpc3RzLnNsaWNlKDAsIDEwKSxcbiAgICBzYW1wbGVfaW1hZ2VzOiBzYW1wbGVJbWFnZXMuaW1hZ2VzLFxuICB9O1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVJlc3BvbnNlKFxuICBxdWVzdGlvbjogc3RyaW5nLFxuICBpbnRlbnQ6IFF1ZXJ5SW50ZW50LFxuICBkYXRhOiBhbnksXG4gIHByb3ZpZGVyOiBFbWJlZGRpbmdQcm92aWRlclxuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgLy8gU2ltcGxlIGZhbGxiYWNrIHJlc3BvbnNlc1xuICBjb25zdCBmYWxsYmFja1Jlc3BvbnNlID0gZ2VuZXJhdGVGYWxsYmFja1Jlc3BvbnNlKHF1ZXN0aW9uLCBpbnRlbnQsIGRhdGEpO1xuXG4gIC8vIElmIG5vIEFQSSBrZXlzLCB1c2UgZmFsbGJhY2tcbiAgaWYgKCFwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSAmJiAhcHJvY2Vzcy5lbnYuR0VNSU5JX0FQSV9LRVkpIHtcbiAgICByZXR1cm4gZmFsbGJhY2tSZXNwb25zZTtcbiAgfVxuXG4gIGNvbnN0IHN5c3RlbVByb21wdCA9IGBZb3UgYXJlIGEgaGVscGZ1bCBhc3Npc3RhbnQgdGhhdCBleHBsYWlucyBkYXRhYmFzZSBxdWVyeSByZXN1bHRzIGluIG5hdHVyYWwgbGFuZ3VhZ2UuXG4gIFxuVGhlIHVzZXIgYXNrZWQ6IFwiJHtxdWVzdGlvbn1cIlxuVGhlIHF1ZXJ5IHR5cGUgd2FzOiAke2ludGVudC50eXBlfVxuVGhlIGRhdGEgcmV0dXJuZWQgaXM6ICR7SlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgMil9XG5cblByb3ZpZGUgYSBjb25jaXNlLCBuYXR1cmFsIGxhbmd1YWdlIHJlc3BvbnNlIHRoYXQgZGlyZWN0bHkgYW5zd2VycyB0aGUgdXNlcidzIHF1ZXN0aW9uLiBCZSBzcGVjaWZpYyB3aXRoIG51bWJlcnMgYW5kIG5hbWVzIHdoZW4gYXZhaWxhYmxlLmA7XG5cbiAgdHJ5IHtcbiAgICBsZXQgcmVzcG9uc2U6IHN0cmluZztcblxuICAgIGlmIChwcm92aWRlciA9PT0gXCJnZW1pbmlcIiAmJiBwcm9jZXNzLmVudi5HRU1JTklfQVBJX0tFWSkge1xuICAgICAgY29uc3QgbW9kZWwgPSBnZW5BSS5nZXRHZW5lcmF0aXZlTW9kZWwoeyBtb2RlbDogXCJnZW1pbmktcHJvXCIgfSk7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBtb2RlbC5nZW5lcmF0ZUNvbnRlbnQoc3lzdGVtUHJvbXB0KTtcbiAgICAgIHJlc3BvbnNlID0gcmVzdWx0LnJlc3BvbnNlLnRleHQoKTtcbiAgICB9IGVsc2UgaWYgKHByb3ZpZGVyID09PSBcIm9wZW5haVwiICYmIHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZKSB7XG4gICAgICBjb25zdCBjb21wbGV0aW9uID0gYXdhaXQgb3BlbmFpLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKHtcbiAgICAgICAgbW9kZWw6IFwiZ3B0LTMuNS10dXJib1wiLFxuICAgICAgICBtZXNzYWdlczogW3sgcm9sZTogXCJzeXN0ZW1cIiwgY29udGVudDogc3lzdGVtUHJvbXB0IH1dLFxuICAgICAgICB0ZW1wZXJhdHVyZTogMC4zLFxuICAgICAgICBtYXhfdG9rZW5zOiAyMDAsXG4gICAgICB9KTtcbiAgICAgIHJlc3BvbnNlID0gY29tcGxldGlvbi5jaG9pY2VzWzBdLm1lc3NhZ2UuY29udGVudCB8fCBmYWxsYmFja1Jlc3BvbnNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsbGJhY2tSZXNwb25zZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzcG9uc2UudHJpbSgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUud2FybihcIkZhaWxlZCB0byBnZW5lcmF0ZSBMTE0gcmVzcG9uc2UsIHVzaW5nIGZhbGxiYWNrOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIGZhbGxiYWNrUmVzcG9uc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVGYWxsYmFja1Jlc3BvbnNlKFxuICBxdWVzdGlvbjogc3RyaW5nLFxuICBpbnRlbnQ6IFF1ZXJ5SW50ZW50LFxuICBkYXRhOiBhbnlcbik6IHN0cmluZyB7XG4gIHN3aXRjaCAoaW50ZW50LnR5cGUpIHtcbiAgICBjYXNlIFwiY291bnRcIjpcbiAgICAgIGlmIChpbnRlbnQudGFyZ2V0ID09PSBcImFydGlzdHNcIikge1xuICAgICAgICByZXR1cm4gYEkgZm91bmQgJHtcbiAgICAgICAgICBkYXRhLmNvdW50XG4gICAgICAgIH0gdW5pcXVlIGFydGlzdHMgaW4gdGhlIGNvbGxlY3Rpb24uIFNvbWUgb2YgdGhlbSBpbmNsdWRlOiAke2RhdGEuYXJ0aXN0c1xuICAgICAgICAgID8uc2xpY2UoMCwgNSlcbiAgICAgICAgICAuam9pbihcIiwgXCIpfS5gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGBUaGUgY29sbGVjdGlvbiBjb250YWlucyAke2RhdGEuY291bnR9IHRvdGFsIGltYWdlcy5gO1xuICAgICAgfVxuXG4gICAgY2FzZSBcInNlYXJjaFwiOlxuICAgIGNhc2UgXCJmaWx0ZXJcIjpcbiAgICAgIHJldHVybiBgSSBmb3VuZCAke2RhdGEuY291bnR9IGltYWdlcyBtYXRjaGluZyB5b3VyIGNyaXRlcmlhLmA7XG5cbiAgICBjYXNlIFwibGlzdFwiOlxuICAgICAgaWYgKGludGVudC50YXJnZXQgPT09IFwiYXJ0aXN0c1wiKSB7XG4gICAgICAgIHJldHVybiBgSGVyZSBhcmUgdGhlIGFydGlzdHMgaW4gdGhlIGNvbGxlY3Rpb246ICR7ZGF0YS5hcnRpc3RzXG4gICAgICAgICAgPy5zbGljZSgwLCAxMClcbiAgICAgICAgICAuam9pbihcIiwgXCIpfSR7ZGF0YS5hcnRpc3RzPy5sZW5ndGggPiAxMCA/IFwiLi4uXCIgOiBcIlwifS5gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGBJIGZvdW5kICR7ZGF0YS5jb3VudH0gaXRlbXMgaW4gdGhlIGNvbGxlY3Rpb24uYDtcbiAgICAgIH1cblxuICAgIGNhc2UgXCJkZXNjcmliZVwiOlxuICAgICAgcmV0dXJuIGBUaGlzIGNvbGxlY3Rpb24gY29udGFpbnMgJHtkYXRhLnRvdGFsX2ltYWdlc30gaW1hZ2VzIGZyb20gJHtcbiAgICAgICAgZGF0YS51bmlxdWVfYXJ0aXN0c1xuICAgICAgfSB1bmlxdWUgYXJ0aXN0cy4gU29tZSBmZWF0dXJlZCBhcnRpc3RzIGluY2x1ZGU6ICR7ZGF0YS5zYW1wbGVfYXJ0aXN0c1xuICAgICAgICA/LnNsaWNlKDAsIDUpXG4gICAgICAgIC5qb2luKFwiLCBcIil9LmA7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFwiSSBwcm9jZXNzZWQgeW91ciBxdWVyeSBzdWNjZXNzZnVsbHkuXCI7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJPcGVuQUkiLCJHb29nbGVHZW5lcmF0aXZlQUkiLCJjbGllbnQiLCJvcGVuYWkiLCJhcGlLZXkiLCJwcm9jZXNzIiwiZW52IiwiT1BFTkFJX0FQSV9LRVkiLCJnZW5BSSIsIkdFTUlOSV9BUElfS0VZIiwicHJvY2Vzc05hdHVyYWxRdWVyeSIsImNvbGxlY3Rpb24iLCJxdWVzdGlvbiIsInByb3ZpZGVyIiwic3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsImludGVudCIsInBhcnNlUXVlcnlJbnRlbnQiLCJyZXN1bHQiLCJleGVjdXRlUXVlcnkiLCJhbnN3ZXIiLCJnZW5lcmF0ZVJlc3BvbnNlIiwiZXhlY3V0aW9uX3RpbWVfbXMiLCJxdWVyeV90eXBlIiwidHlwZSIsImRhdGEiLCJlcnJvciIsImNvbnNvbGUiLCJFcnJvciIsImZhbGxiYWNrSW50ZW50IiwiaW5mZXJJbnRlbnRGcm9tUXVlc3Rpb24iLCJsb2ciLCJzeXN0ZW1Qcm9tcHQiLCJyZXNwb25zZSIsIm1vZGVsIiwiZ2V0R2VuZXJhdGl2ZU1vZGVsIiwiZ2VuZXJhdGVDb250ZW50IiwidGV4dCIsImNvbXBsZXRpb24iLCJjaGF0IiwiY29tcGxldGlvbnMiLCJjcmVhdGUiLCJtZXNzYWdlcyIsInJvbGUiLCJjb250ZW50IiwidGVtcGVyYXR1cmUiLCJjaG9pY2VzIiwibWVzc2FnZSIsImpzb25NYXRjaCIsIm1hdGNoIiwianNvblN0ciIsIkpTT04iLCJwYXJzZSIsImUiLCJ3YXJuIiwicSIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJ0YXJnZXQiLCJhcnRpc3RNYXRjaCIsImZpbHRlciIsIm5hbWUiLCJsaW1pdCIsImNvdW50VW5pcXVlQXJ0aXN0cyIsImNvdW50VG90YWwiLCJzZWFyY2hJbWFnZXMiLCJsaXN0VW5pcXVlQXJ0aXN0cyIsImxpc3RJbWFnZXMiLCJmaWx0ZXJJbWFnZXMiLCJkZXNjcmliZUNvbGxlY3Rpb24iLCJjb3VudCIsInNjcm9sbCIsIndpdGhfcGF5bG9hZCIsIndpdGhfdmVjdG9yIiwiYXJ0aXN0cyIsIlNldCIsInBvaW50cyIsIm1hcCIsInBvaW50IiwicGF5bG9hZCIsIkJvb2xlYW4iLCJzaXplIiwiQXJyYXkiLCJmcm9tIiwic2xpY2UiLCJmaWx0ZXJlZFBvaW50cyIsIk9iamVjdCIsImVudHJpZXMiLCJldmVyeSIsImtleSIsInZhbHVlIiwibGltaXRlZFBvaW50cyIsImxlbmd0aCIsImltYWdlcyIsImlkIiwiYXJ0aXN0IiwiZmlsZW5hbWUiLCJmaWxlX25hbWUiLCJ0b3RhbENvdW50IiwiYXJ0aXN0c0RhdGEiLCJzYW1wbGVJbWFnZXMiLCJ0b3RhbF9pbWFnZXMiLCJ1bmlxdWVfYXJ0aXN0cyIsInNhbXBsZV9hcnRpc3RzIiwic2FtcGxlX2ltYWdlcyIsImZhbGxiYWNrUmVzcG9uc2UiLCJnZW5lcmF0ZUZhbGxiYWNrUmVzcG9uc2UiLCJzdHJpbmdpZnkiLCJtYXhfdG9rZW5zIiwidHJpbSIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./lib/qdrant/nlp-query.ts\n");

/***/ }),

/***/ "(api)/./pages/api/ask.ts":
/*!**************************!*\
  !*** ./pages/api/ask.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_qdrant_nlp_query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/qdrant/nlp-query */ \"(api)/./lib/qdrant/nlp-query.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_qdrant_nlp_query__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_qdrant_nlp_query__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nasync function handler(req, res) {\n    // Enable CORS\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    res.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS\");\n    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n    if (req.method === \"OPTIONS\") {\n        res.status(200).end();\n        return;\n    }\n    if (req.method !== \"POST\") {\n        res.setHeader(\"Allow\", [\n            \"POST\"\n        ]);\n        res.status(405).json({\n            error: `Method ${req.method} Not Allowed`\n        });\n        return;\n    }\n    try {\n        const { collection , question , provider  } = req.body;\n        if (!collection || !question) {\n            res.status(400).json({\n                error: \"Missing required fields: collection and question\"\n            });\n            return;\n        }\n        console.log(`Processing natural language query: \"${question}\" for collection: ${collection}`);\n        const result = await (0,_lib_qdrant_nlp_query__WEBPACK_IMPORTED_MODULE_0__.processNaturalQuery)(collection, question, provider || \"openai\");\n        // Transform the result to match NaturalQueryResponse interface\n        const response = {\n            question,\n            answer: result.answer,\n            query_type: result.query_type,\n            data: result.data,\n            execution_time_ms: result.execution_time_ms\n        };\n        res.status(200).json(response);\n    } catch (error) {\n        console.error(\"Error processing natural language query:\", error);\n        res.status(500).json({\n            error: error instanceof Error ? error.message : \"Internal server error\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvYXNrLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQ2lFO0FBR2xELGVBQWVDLE9BQU8sQ0FDbkNDLEdBQW1CLEVBQ25CQyxHQUE4RCxFQUM5RDtJQUNBLGNBQWM7SUFDZEEsR0FBRyxDQUFDQyxTQUFTLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbERELEdBQUcsQ0FBQ0MsU0FBUyxDQUFDLDhCQUE4QixFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFDcEVELEdBQUcsQ0FBQ0MsU0FBUyxDQUFDLDhCQUE4QixFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBRTlELElBQUlGLEdBQUcsQ0FBQ0csTUFBTSxLQUFLLFNBQVMsRUFBRTtRQUM1QkYsR0FBRyxDQUFDRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLE9BQU87SUFDVCxDQUFDO0lBRUQsSUFBSUwsR0FBRyxDQUFDRyxNQUFNLEtBQUssTUFBTSxFQUFFO1FBQ3pCRixHQUFHLENBQUNDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7WUFBQyxNQUFNO1NBQUMsQ0FBQyxDQUFDO1FBQ2pDRCxHQUFHLENBQUNHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0UsSUFBSSxDQUFDO1lBQUVDLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRVAsR0FBRyxDQUFDRyxNQUFNLENBQUMsWUFBWSxDQUFDO1NBQUUsQ0FBQyxDQUFDO1FBQ3BFLE9BQU87SUFDVCxDQUFDO0lBRUQsSUFBSTtRQUNGLE1BQU0sRUFBRUssVUFBVSxHQUFFQyxRQUFRLEdBQUVDLFFBQVEsR0FBRSxHQUFHVixHQUFHLENBQUNXLElBQUk7UUFFbkQsSUFBSSxDQUFDSCxVQUFVLElBQUksQ0FBQ0MsUUFBUSxFQUFFO1lBQzVCUixHQUFHLENBQUNHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0UsSUFBSSxDQUFDO2dCQUNuQkMsS0FBSyxFQUFFLGtEQUFrRDthQUMxRCxDQUFDLENBQUM7WUFDSCxPQUFPO1FBQ1QsQ0FBQztRQUVESyxPQUFPLENBQUNDLEdBQUcsQ0FDVCxDQUFDLG9DQUFvQyxFQUFFSixRQUFRLENBQUMsa0JBQWtCLEVBQUVELFVBQVUsQ0FBQyxDQUFDLENBQ2pGLENBQUM7UUFFRixNQUFNTSxNQUFNLEdBQUcsTUFBTWhCLDBFQUFtQixDQUN0Q1UsVUFBVSxFQUNWQyxRQUFRLEVBQ1JDLFFBQVEsSUFBSSxRQUFRLENBQ3JCO1FBRUQsK0RBQStEO1FBQy9ELE1BQU1LLFFBQVEsR0FBeUI7WUFDckNOLFFBQVE7WUFDUk8sTUFBTSxFQUFFRixNQUFNLENBQUNFLE1BQU07WUFDckJDLFVBQVUsRUFBRUgsTUFBTSxDQUFDRyxVQUFVO1lBQzdCQyxJQUFJLEVBQUVKLE1BQU0sQ0FBQ0ksSUFBSTtZQUNqQkMsaUJBQWlCLEVBQUVMLE1BQU0sQ0FBQ0ssaUJBQWlCO1NBQzVDO1FBRURsQixHQUFHLENBQUNHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0UsSUFBSSxDQUFDUyxRQUFRLENBQUMsQ0FBQztJQUNqQyxFQUFFLE9BQU9SLEtBQUssRUFBRTtRQUNkSyxPQUFPLENBQUNMLEtBQUssQ0FBQywwQ0FBMEMsRUFBRUEsS0FBSyxDQUFDLENBQUM7UUFDakVOLEdBQUcsQ0FBQ0csTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDRSxJQUFJLENBQUM7WUFDbkJDLEtBQUssRUFBRUEsS0FBSyxZQUFZYSxLQUFLLEdBQUdiLEtBQUssQ0FBQ2MsT0FBTyxHQUFHLHVCQUF1QjtTQUN4RSxDQUFDLENBQUM7SUFDTCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3llYXJuLy4vcGFnZXMvYXBpL2Fzay50cz82NjQzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgTmV4dEFwaVJlcXVlc3QsIE5leHRBcGlSZXNwb25zZSB9IGZyb20gXCJuZXh0XCI7XG5pbXBvcnQgeyBwcm9jZXNzTmF0dXJhbFF1ZXJ5IH0gZnJvbSBcIi4uLy4uL2xpYi9xZHJhbnQvbmxwLXF1ZXJ5XCI7XG5pbXBvcnQgeyBOYXR1cmFsUXVlcnlSZXF1ZXN0LCBOYXR1cmFsUXVlcnlSZXNwb25zZSB9IGZyb20gXCIuLi8uLi9saWIvdHlwZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihcbiAgcmVxOiBOZXh0QXBpUmVxdWVzdCxcbiAgcmVzOiBOZXh0QXBpUmVzcG9uc2U8TmF0dXJhbFF1ZXJ5UmVzcG9uc2UgfCB7IGVycm9yOiBzdHJpbmcgfT5cbikge1xuICAvLyBFbmFibGUgQ09SU1xuICByZXMuc2V0SGVhZGVyKFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCIsIFwiKlwiKTtcbiAgcmVzLnNldEhlYWRlcihcIkFjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHNcIiwgXCJHRVQsIFBPU1QsIE9QVElPTlNcIik7XG4gIHJlcy5zZXRIZWFkZXIoXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzXCIsIFwiQ29udGVudC1UeXBlXCIpO1xuXG4gIGlmIChyZXEubWV0aG9kID09PSBcIk9QVElPTlNcIikge1xuICAgIHJlcy5zdGF0dXMoMjAwKS5lbmQoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAocmVxLm1ldGhvZCAhPT0gXCJQT1NUXCIpIHtcbiAgICByZXMuc2V0SGVhZGVyKFwiQWxsb3dcIiwgW1wiUE9TVFwiXSk7XG4gICAgcmVzLnN0YXR1cyg0MDUpLmpzb24oeyBlcnJvcjogYE1ldGhvZCAke3JlcS5tZXRob2R9IE5vdCBBbGxvd2VkYCB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IHsgY29sbGVjdGlvbiwgcXVlc3Rpb24sIHByb3ZpZGVyIH0gPSByZXEuYm9keSBhcyBOYXR1cmFsUXVlcnlSZXF1ZXN0O1xuXG4gICAgaWYgKCFjb2xsZWN0aW9uIHx8ICFxdWVzdGlvbikge1xuICAgICAgcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogXCJNaXNzaW5nIHJlcXVpcmVkIGZpZWxkczogY29sbGVjdGlvbiBhbmQgcXVlc3Rpb25cIixcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYFByb2Nlc3NpbmcgbmF0dXJhbCBsYW5ndWFnZSBxdWVyeTogXCIke3F1ZXN0aW9ufVwiIGZvciBjb2xsZWN0aW9uOiAke2NvbGxlY3Rpb259YFxuICAgICk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm9jZXNzTmF0dXJhbFF1ZXJ5KFxuICAgICAgY29sbGVjdGlvbixcbiAgICAgIHF1ZXN0aW9uLFxuICAgICAgcHJvdmlkZXIgfHwgXCJvcGVuYWlcIlxuICAgICk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gdGhlIHJlc3VsdCB0byBtYXRjaCBOYXR1cmFsUXVlcnlSZXNwb25zZSBpbnRlcmZhY2VcbiAgICBjb25zdCByZXNwb25zZTogTmF0dXJhbFF1ZXJ5UmVzcG9uc2UgPSB7XG4gICAgICBxdWVzdGlvbixcbiAgICAgIGFuc3dlcjogcmVzdWx0LmFuc3dlcixcbiAgICAgIHF1ZXJ5X3R5cGU6IHJlc3VsdC5xdWVyeV90eXBlLFxuICAgICAgZGF0YTogcmVzdWx0LmRhdGEsXG4gICAgICBleGVjdXRpb25fdGltZV9tczogcmVzdWx0LmV4ZWN1dGlvbl90aW1lX21zLFxuICAgIH07XG5cbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbihyZXNwb25zZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIHByb2Nlc3NpbmcgbmF0dXJhbCBsYW5ndWFnZSBxdWVyeTpcIiwgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFwiSW50ZXJuYWwgc2VydmVyIGVycm9yXCIsXG4gICAgfSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJwcm9jZXNzTmF0dXJhbFF1ZXJ5IiwiaGFuZGxlciIsInJlcSIsInJlcyIsInNldEhlYWRlciIsIm1ldGhvZCIsInN0YXR1cyIsImVuZCIsImpzb24iLCJlcnJvciIsImNvbGxlY3Rpb24iLCJxdWVzdGlvbiIsInByb3ZpZGVyIiwiYm9keSIsImNvbnNvbGUiLCJsb2ciLCJyZXN1bHQiLCJyZXNwb25zZSIsImFuc3dlciIsInF1ZXJ5X3R5cGUiLCJkYXRhIiwiZXhlY3V0aW9uX3RpbWVfbXMiLCJFcnJvciIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./pages/api/ask.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/ask.ts"));
module.exports = __webpack_exports__;

})();